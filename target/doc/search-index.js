var searchIndex = JSON.parse('{\
"api_server_rest":{"doc":"","t":"RDRRRNGNGRAMLLMLLAMLLLLLMLLLLLLLFALLALLLADRRRMLLMLLLLLLLLLLLLLDRRRMLLMLLLLLLLLLLLLIDLLLLLLLLLLLLLLLLLLMLLLAAAAMDDDDMMMRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFHLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIDDDLLLLLLMLLFLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLDDMMRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFHLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLDIDLLLLMLLFLLLLLLLLLLLLLLLLMLLLLLLLF","n":["AA_ADDR","Args","CDH_ADDR","DEFAULT_BIND","DEFAULT_FEATURE","Err","GenericError","Ok","Result","TTRPC_TIMEOUT","aa","aa_addr","augment_args","augment_args_for_update","bind","borrow","borrow_mut","cdh","cdh_addr","command","command_for_update","deref","deref_mut","drop","features","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","init","into","main","router","try_from","try_into","ttrpc_proto","type_id","update_from_arg_matches","update_from_arg_matches_mut","utils","AAClient","AA_EVIDENCE_URL","AA_ROOT","AA_TOKEN_URL","accepted_method","borrow","borrow_mut","client","deref","deref_mut","drop","from","get_evidence","get_token","handle_request","init","into","new","try_from","try_into","type_id","CDHClient","CDH_RESOURCE_URL","CDH_ROOT","KBS_PREFIX","accepted_method","borrow","borrow_mut","client","deref","deref_mut","drop","from","get_resource","handle_request","init","into","new","try_from","try_into","type_id","ApiHandler","Router","bad_request","borrow","borrow_mut","deref","deref_mut","drop","forbidden","from","handle_request","init","into","json_response","new","not_allowed","not_found","octet_stream_response","register_route","route","routes","try_from","try_into","type_id","attestation_agent","attestation_agent_ttrpc","confidential_data_hub","confidential_data_hub_ttrpc","Evidence","GetEvidenceRequest","GetEvidenceResponse","GetTokenRequest","GetTokenResponse","RuntimeData","Token","TokenType","_PROTOBUF_VERSION_CHECK","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","compute_size","compute_size","compute_size","compute_size","compute_size_dyn","compute_size_dyn","compute_size_dyn","compute_size_dyn","decode","decode","decode","decode","default","default","default","default","default","default","default","default","default_instance","default_instance","default_instance","default_instance","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","descriptor","descriptor","descriptor","descriptor","descriptor_dyn","descriptor_dyn","descriptor_dyn","descriptor_dyn","drop","drop","drop","drop","encode","encode","encode","encode","eq","eq","eq","eq","file_descriptor","file_descriptor_proto","file_descriptor_proto_data","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","generated_message_descriptor_data","generated_message_descriptor_data","generated_message_descriptor_data","generated_message_descriptor_data","init","init","init","init","into","into","into","into","is_initialized","is_initialized","is_initialized","is_initialized","is_initialized_dyn","is_initialized_dyn","is_initialized_dyn","is_initialized_dyn","merge_from","merge_from","merge_from","merge_from","merge_from_dyn","merge_from_dyn","merge_from_dyn","merge_from_dyn","mut_special_fields","mut_special_fields","mut_special_fields","mut_special_fields","mut_special_fields_dyn","mut_special_fields_dyn","mut_special_fields_dyn","mut_special_fields_dyn","new","new","new","new","new","new","new","new","size","size","size","size","special_fields","special_fields","special_fields","special_fields","special_fields","special_fields","special_fields","special_fields","special_fields_dyn","special_fields_dyn","special_fields_dyn","special_fields_dyn","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write_to_with_cached_sizes","write_to_with_cached_sizes","write_to_with_cached_sizes","write_to_with_cached_sizes","write_to_with_cached_sizes_dyn","write_to_with_cached_sizes_dyn","write_to_with_cached_sizes_dyn","write_to_with_cached_sizes_dyn","AttestationAgentService","AttestationAgentServiceClient","GetEvidenceMethod","GetTokenMethod","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","client","clone","clone_into","create_attestation_agent_service","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","from","from","from","get_evidence","get_evidence","get_token","get_token","handler","handler","init","init","init","into","into","into","new","service","service","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","GetResourceRequest","GetResourceResponse","Resource","ResourcePath","_PROTOBUF_VERSION_CHECK","borrow","borrow","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","compute_size","compute_size","compute_size_dyn","compute_size_dyn","decode","decode","default","default","default","default","default_instance","default_instance","deref","deref","deref_mut","deref_mut","descriptor","descriptor","descriptor_dyn","descriptor_dyn","drop","drop","encode","encode","eq","eq","file_descriptor","file_descriptor_proto","file_descriptor_proto_data","fmt","fmt","fmt","fmt","from","from","generated_message_descriptor_data","generated_message_descriptor_data","init","init","into","into","is_initialized","is_initialized","is_initialized_dyn","is_initialized_dyn","merge_from","merge_from","merge_from_dyn","merge_from_dyn","mut_special_fields","mut_special_fields","mut_special_fields_dyn","mut_special_fields_dyn","new","new","new","new","size","size","special_fields","special_fields","special_fields","special_fields","special_fields_dyn","special_fields_dyn","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","write_to_with_cached_sizes","write_to_with_cached_sizes","write_to_with_cached_sizes_dyn","write_to_with_cached_sizes_dyn","GetResourceMethod","GetResourceService","GetResourceServiceClient","borrow","borrow","borrow_mut","borrow_mut","client","clone","clone_into","create_get_resource_service","deref","deref","deref_mut","deref_mut","drop","drop","from","from","get_resource","get_resource","handler","init","init","into","into","new","service","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","split_nth_slash"],"q":[[0,"api_server_rest"],[41,"api_server_rest::aa"],[62,"api_server_rest::cdh"],[82,"api_server_rest::router"],[106,"api_server_rest::ttrpc_proto"],[110,"api_server_rest::ttrpc_proto::attestation_agent"],[294,"api_server_rest::ttrpc_proto::attestation_agent_ttrpc"],[345,"api_server_rest::ttrpc_proto::confidential_data_hub"],[439,"api_server_rest::ttrpc_proto::confidential_data_hub_ttrpc"],[474,"api_server_rest::utils"],[475,"clap_builder::builder::command"],[476,"core::fmt"],[477,"core::fmt"],[478,"clap_builder"],[479,"core::result"],[480,"clap_builder::util::id"],[481,"core::option"],[482,"core::error"],[483,"alloc::boxed"],[484,"core::any"],[485,"alloc::vec"],[486,"anyhow"],[487,"core::net::socket_addr"],[488,"hyper::body::body"],[489,"http::request"],[490,"core::future::future"],[491,"core::pin"],[492,"http::method"],[493,"http::response"],[494,"core::marker"],[495,"alloc::string"],[496,"core::convert"],[497,"protobuf::reflect::message"],[498,"alloc::alloc"],[499,"protobuf::reflect::file"],[500,"protobuf::descriptor"],[501,"protobuf::reflect::message::generated"],[502,"protobuf::coded_input_stream"],[503,"protobuf::error"],[504,"protobuf::error"],[505,"protobuf::coded_output_stream"],[506,"alloc::sync"],[507,"ttrpc::asynchronous::server"],[508,"std::collections::hash::map"],[509,"ttrpc::context"],[510,"ttrpc::error"],[511,"ttrpc::asynchronous::utils"],[512,"ttrpc::proto::compiled::ttrpc"],[513,"ttrpc::asynchronous::client"]],"d":["","API Server arguments info.","","","","Contains the error value","","Contains the success value","","","","Listen address of attestation-agent TTRPC Service","","","Bind address for API Server","","","","Listen address of confidential-data-hub TTRPC Service","","","","","","Features for rest API Server, allowed options: resource, …","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","ROOT path for Confidential Data Hub API","URL for querying CDH get resource API","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","URL for querying CDH get resource API","ROOT path for Confidential Data Hub API","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Generated file from <code>attestation_agent.proto</code>","","Generated file from <code>confidential_data_hub.proto</code>","","","","","","","","","","Generated files are compatible only with the same version …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>FileDescriptor</code> object which allows dynamic access to files","<code>FileDescriptorProto</code> object which was a source for this …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Generated files are compatible only with the same version …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>FileDescriptor</code> object which allows dynamic access to files","<code>FileDescriptorProto</code> object which was a source for this …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,68,0,68,0,0,0,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,4,4,0,4,4,4,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,0,32,31,31,31,31,31,32,31,32,31,31,32,31,32,32,32,31,31,31,31,31,31,0,0,0,0,34,0,0,0,0,33,36,35,0,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,33,34,34,35,35,36,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,0,0,0,33,33,34,34,35,35,36,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,33,34,34,35,35,36,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,0,0,0,0,59,61,51,59,61,51,51,51,51,0,59,61,51,59,61,51,59,61,51,59,61,51,51,52,51,52,59,61,59,61,51,59,61,51,51,59,61,51,59,61,51,59,61,51,59,61,51,0,0,64,63,0,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,63,64,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,0,0,0,63,63,64,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,63,64,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,0,0,0,67,65,67,65,65,65,65,0,67,65,67,65,67,65,67,65,65,66,67,67,65,67,65,65,67,65,67,65,67,65,67,65,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[1,1],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[],1],[[],1],[2,-1,[]],[2,-1,[]],[2,3],0,[[4,5],6],[-1,-1,[]],[7,[[9,[4,8]]]],[7,[[9,[4,8]]]],[[],[[11,[10]]]],[[],2],[-1,-2,[],[]],[[],[[9,[3,[13,[12]]]]]],0,[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],0,[-1,14,[]],[[4,7],[[9,[3,8]]]],[[4,7],[[9,[3,8]]]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[2,-1,[]],[2,-1,[]],[2,3],[-1,-1,[]],[[15,[17,[16]]],[[19,[[18,[16]]]]]],[[15,20],[[19,[[18,[16]]]]]],[[15,21,20,[23,[22]]],[[25,[[13,[24]]]]]],[[],2],[-1,-2,[],[]],[[20,[18,[26]]],[[19,[15]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,14,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[2,-1,[]],[2,-1,[]],[2,3],[-1,-1,[]],[[27,20],[[19,[[18,[16]]]]]],[[27,21,20,[23,[22]]],[[25,[[13,[24]]]]]],[[],2],[-1,-2,[],[]],[[20,[18,[26]]],[[19,[27]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,14,[]],0,0,[-1,[[19,[[28,[22]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,-1,[]],[2,-1,[]],[2,3],[-1,[[19,[[28,[22]]]]],[]],[-1,-1,[]],[[-1,21,20,[23,[22]]],[[25,[[13,[24]]]]],29],[[],2],[-1,-2,[],[]],[[-1,30],[[19,[[28,[22]]]]],[]],[[],31],[-1,[[19,[[28,[22]]]]],[]],[-1,[[19,[[28,[22]]]]],[]],[[-1,[18,[16]]],[[19,[[28,[22]]]]],[]],[[31,20,[13,[32]]],3],[[31,21,[23,[22]]],[[19,[[28,[22]]]]]],0,[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,14,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[33,3],[34,3],[35,3],[36,3],[33,33],[34,34],[35,35],[36,36],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[33,37],[34,37],[35,37],[36,37],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,[[9,[-2]]],[[38,[[17,[16]]]]],[]],[-1,[[9,[-2]]],[[38,[[17,[16]]]]],[]],[-1,[[9,[-2]]],[[38,[[17,[16]]]]],[]],[-1,[[9,[-2]]],[[38,[[17,[16]]]]],[]],[[],33],[[],33],[[],34],[[],34],[[],35],[[],35],[[],36],[[],36],[[],33],[[],34],[[],35],[[],36],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[],39],[[],39],[[],39],[[],39],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[2,3],[2,3],[2,3],[2,3],[-1,[[9,[[18,[16,40]]]]],[]],[-1,[[9,[[18,[16,40]]]]],[]],[-1,[[9,[[18,[16,40]]]]],[]],[-1,[[9,[[18,[16,40]]]]],[]],[[33,33],41],[[34,34],41],[[35,35],41],[[36,36],41],[[],42],[[],43],0,[[33,5],6],[[33,5],6],[[34,5],6],[[34,5],6],[[35,5],6],[[35,5],6],[[36,5],6],[[36,5],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],44],[[],44],[[],44],[[],44],[[],2],[[],2],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[33,41],[34,41],[35,41],[36,41],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[[33,45],[[46,[3]]]],[[34,45],[[46,[3]]]],[[35,45],[[46,[3]]]],[[36,45],[[46,[3]]]],[[-1,45],[[9,[3,47]]],[]],[[-1,45],[[9,[3,47]]],[]],[[-1,45],[[9,[3,47]]],[]],[[-1,45],[[9,[3,47]]],[]],[33,48],[34,48],[35,48],[36,48],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[[],33],[[],33],[[],34],[[],34],[[],35],[[],35],[[],36],[[],36],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[33,48],[34,48],[35,48],[36,48],0,0,0,0,[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[[33,50],[[46,[3]]]],[[34,50],[[46,[3]]]],[[35,50],[[46,[3]]]],[[36,50],[[46,[3]]]],[[-1,50],[[9,[3,47]]],[]],[[-1,50],[[9,[3,47]]],[]],[[-1,50],[[9,[3,47]]],[]],[[-1,50],[[9,[3,47]]],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[51,51],[[-1,-2],3,[],[]],[[[53,[[13,[52]]]]],[[55,[30,54]]]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,3],[2,3],[2,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[51,56,33],[[57,[34]]]],[[-1,58,33],[[25,[[13,[24]]]]],[]],[[51,56,35],[[57,[36]]]],[[-1,58,35],[[25,[[13,[24]]]]],[]],[[59,58,60],[[25,[[13,[24]]]]]],[[61,58,60],[[25,[[13,[24]]]]]],[[],2],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[62,51],0,0,[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[63,3],[64,3],[63,63],[64,64],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[63,37],[64,37],[-1,37,[]],[-1,37,[]],[-1,[[9,[-2]]],[[38,[[17,[16]]]]],[]],[-1,[[9,[-2]]],[[38,[[17,[16]]]]],[]],[[],63],[[],63],[[],64],[[],64],[[],63],[[],64],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[[],39],[[],39],[-1,39,[]],[-1,39,[]],[2,3],[2,3],[-1,[[9,[[18,[16,40]]]]],[]],[-1,[[9,[[18,[16,40]]]]],[]],[[63,63],41],[[64,64],41],[[],42],[[],43],0,[[63,5],6],[[63,5],6],[[64,5],6],[[64,5],6],[-1,-1,[]],[-1,-1,[]],[[],44],[[],44],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[63,41],[64,41],[-1,41,[]],[-1,41,[]],[[63,45],[[46,[3]]]],[[64,45],[[46,[3]]]],[[-1,45],[[9,[3,47]]],[]],[[-1,45],[[9,[3,47]]],[]],[63,48],[64,48],[-1,48,[]],[-1,48,[]],[[],63],[[],63],[[],64],[[],64],[-1,49,[]],[-1,49,[]],[63,48],[64,48],0,0,[-1,48,[]],[-1,48,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,30,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[[63,50],[[46,[3]]]],[[64,50],[[46,[3]]]],[[-1,50],[[9,[3,47]]],[]],[[-1,50],[[9,[3,47]]],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[65,65],[[-1,-2],3,[],[]],[[[53,[[13,[66]]]]],[[55,[30,54]]]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,3],[2,3],[-1,-1,[]],[-1,-1,[]],[[65,56,63],[[57,[64]]]],[[-1,58,63],[[25,[[13,[24]]]]],[]],[[67,58,60],[[25,[[13,[24]]]]]],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[62,65],0,[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[[20,2],[[11,[[3,[20,20]]]]]]],"c":[],"p":[[3,"Command",475],[15,"usize"],[15,"tuple"],[3,"Args",0],[3,"Formatter",476],[6,"Result",476],[3,"ArgMatches",477],[6,"Error",478],[4,"Result",479],[3,"Id",480],[4,"Option",481],[8,"Error",482],[3,"Box",483],[3,"TypeId",484],[3,"AAClient",41],[15,"u8"],[15,"slice"],[3,"Vec",485],[6,"Result",486],[15,"str"],[4,"SocketAddr",487],[3,"Body",488],[3,"Request",489],[8,"Future",490],[3,"Pin",491],[3,"Method",492],[3,"CDHClient",62],[3,"Response",493],[8,"Sync",494],[3,"String",495],[3,"Router",82],[8,"ApiHandler",82],[3,"GetEvidenceRequest",110],[3,"GetEvidenceResponse",110],[3,"GetTokenRequest",110],[3,"GetTokenResponse",110],[15,"u64"],[8,"AsRef",496],[3,"MessageDescriptor",497],[3,"Global",498],[15,"bool"],[3,"FileDescriptor",499],[3,"FileDescriptorProto",500],[3,"GeneratedMessageDescriptorData",501],[3,"CodedInputStream",502],[6,"Result",503],[3,"Error",503],[3,"SpecialFields",504],[15,"u32"],[3,"CodedOutputStream",505],[3,"AttestationAgentServiceClient",294],[8,"AttestationAgentService",294],[3,"Arc",506],[3,"Service",507],[3,"HashMap",508],[3,"Context",509],[6,"Result",510],[3,"TtrpcContext",511],[3,"GetEvidenceMethod",294],[3,"Request",512],[3,"GetTokenMethod",294],[3,"Client",513],[3,"GetResourceRequest",345],[3,"GetResourceResponse",345],[3,"GetResourceServiceClient",439],[8,"GetResourceService",439],[3,"GetResourceMethod",439],[6,"Result",0]]},\
"attestation_agent":{"doc":"","t":"FAADRRMALLLLLLLLALLALLALLDLLLLLLLLLLLLLLLALLFDLLLLLLLLLLLLLLALLFRRRRRRRDRDMLLLLLLLLLLLLLLLLLLLLLLFFLLLLMMALFLLLLLLLALLLLLLDRRRRRRRRDDDDDDDDRRMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFAAAAAAMDDDDMMMRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFHLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIDDDLLLLLLMLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLDDMMMMRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFHLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLDIDLLLLMLLFLLLLLLLLLLLLLLLLLLMLLLLLLLLLDMDMRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFHLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLIDDDLLLLLLMLLFLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLDDRRRRRMMLLLLLLFLLLLLLLLLLLLLLLLMLLLLLMLLLLFLLLLLL","n":["main","rpc","ttrpc","ABOUT","AGENT_NAME","PROTOCOL","__private_field","attestation","borrow","borrow_mut","deref","deref","deref_mut","drop","free","from","getresource","init","into","keyprovider","try_from","try_into","ttrpc_protocol","type_id","vzip","Attestation","borrow","borrow_mut","default","deref","deref_mut","drop","fmt","free","from","get_evidence","get_token","init","into","try_from","try_into","ttrpc","type_id","vzip","start_ttrpc_service","GetResource","borrow","borrow_mut","default","deref","deref_mut","drop","fmt","free","from","get_resource","init","into","try_from","try_into","ttrpc","type_id","vzip","start_ttrpc_service","ERR_ANNOTATION_NOT_BASE64","ERR_DC_EMPTY","ERR_KBC_KBS_NOT_BASE64","ERR_KBC_KBS_NOT_FOUND","ERR_NO_KBC_NAME","ERR_NO_KBS_URI","ERR_WRONG_DC_PARAM","InputPayload","KBC_KBS_PAIR_SEP","KeyProvider","annotation","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","fmt","fmt","free","free","from","from","get_annotation","get_kbc_kbs_pair","init","init","into","into","kbc_name","kbs_uri","message","serialize","str_to_kbc_kbs","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","ttrpc","type_id","type_id","un_wrap_key","vzip","vzip","wrap_key","Dc","ERR_ANNOTATION_EMPTY","ERR_INVALID_OP","ERR_MISSING_OP","ERR_UNSUPPORTED_OP","ERR_UNWRAP_PARAMS_NO_ANNOTATION","ERR_UNWRAP_PARAMS_NO_DC","ERR_WRAP_PARAMS_EXPECT_EMPTY_EC","ERR_WRAP_PARAMS_EXPECT_EMPTY_OPTSDATA","Ec","KeyProviderInput","KeyUnwrapOutput","KeyUnwrapParams","KeyUnwrapResults","KeyWrapOutput","KeyWrapParams","KeyWrapResults","OP_KEY_UNWRAP","OP_KEY_WRAP","annotation","annotation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","dc","decrypt_config","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","ec","empty","empty","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","free","free","free","free","free","free","free","free","free","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","keyunwrapparams","keyunwrapresults","keywrapparams","keywrapresults","op","optsdata","optsdata","parameters","parameters","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","valid","valid","valid","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_annotation","with_base64_annotation","with_dc","with_ec","with_key_unwrap_params","with_key_wrap_params","with_op","with_opts_data","start_ttrpc_service","attestation_agent","attestation_agent_ttrpc","getresource","getresource_ttrpc","keyprovider","keyprovider_ttrpc","Evidence","GetEvidenceRequest","GetEvidenceResponse","GetTokenRequest","GetTokenResponse","RuntimeData","Token","TokenType","_PROTOBUF_VERSION_CHECK","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","compute_size","compute_size","compute_size","compute_size","compute_size_dyn","compute_size_dyn","compute_size_dyn","compute_size_dyn","decode","decode","decode","decode","default","default","default","default","default","default","default","default","default_instance","default_instance","default_instance","default_instance","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","descriptor","descriptor","descriptor","descriptor","descriptor_dyn","descriptor_dyn","descriptor_dyn","descriptor_dyn","drop","drop","drop","drop","encode","encode","encode","encode","eq","eq","eq","eq","file_descriptor","file_descriptor_proto","file_descriptor_proto_data","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","free","free","free","free","from","from","from","from","generated_message_descriptor_data","generated_message_descriptor_data","generated_message_descriptor_data","generated_message_descriptor_data","init","init","init","init","into","into","into","into","is_initialized","is_initialized","is_initialized","is_initialized","is_initialized_dyn","is_initialized_dyn","is_initialized_dyn","is_initialized_dyn","merge_from","merge_from","merge_from","merge_from","merge_from_dyn","merge_from_dyn","merge_from_dyn","merge_from_dyn","mut_special_fields","mut_special_fields","mut_special_fields","mut_special_fields","mut_special_fields_dyn","mut_special_fields_dyn","mut_special_fields_dyn","mut_special_fields_dyn","new","new","new","new","new","new","new","new","size","size","size","size","special_fields","special_fields","special_fields","special_fields","special_fields","special_fields","special_fields","special_fields","special_fields_dyn","special_fields_dyn","special_fields_dyn","special_fields_dyn","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write_to_with_cached_sizes","write_to_with_cached_sizes","write_to_with_cached_sizes","write_to_with_cached_sizes","write_to_with_cached_sizes_dyn","write_to_with_cached_sizes_dyn","write_to_with_cached_sizes_dyn","write_to_with_cached_sizes_dyn","AttestationAgentService","AttestationAgentServiceClient","GetEvidenceMethod","GetTokenMethod","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","client","clone","clone_into","create_attestation_agent_service","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","free","free","free","from","from","from","get_evidence","get_evidence","get_token","get_token","handler","handler","init","init","init","into","into","into","new","service","service","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","GetResourceRequest","GetResourceResponse","KbcName","KbsUri","Resource","ResourcePath","_PROTOBUF_VERSION_CHECK","borrow","borrow","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","compute_size","compute_size","compute_size_dyn","compute_size_dyn","decode","decode","default","default","default","default","default_instance","default_instance","deref","deref","deref_mut","deref_mut","descriptor","descriptor","descriptor_dyn","descriptor_dyn","drop","drop","encode","encode","eq","eq","file_descriptor","file_descriptor_proto","file_descriptor_proto_data","fmt","fmt","fmt","fmt","free","free","from","from","generated_message_descriptor_data","generated_message_descriptor_data","init","init","into","into","is_initialized","is_initialized","is_initialized_dyn","is_initialized_dyn","merge_from","merge_from","merge_from_dyn","merge_from_dyn","mut_special_fields","mut_special_fields","mut_special_fields_dyn","mut_special_fields_dyn","new","new","new","new","size","size","special_fields","special_fields","special_fields","special_fields","special_fields_dyn","special_fields_dyn","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write_to_with_cached_sizes","write_to_with_cached_sizes","write_to_with_cached_sizes_dyn","write_to_with_cached_sizes_dyn","GetResourceMethod","GetResourceService","GetResourceServiceClient","borrow","borrow","borrow_mut","borrow_mut","client","clone","clone_into","create_get_resource_service","deref","deref","deref_mut","deref_mut","drop","drop","free","free","from","from","get_resource","get_resource","handler","init","init","into","into","new","service","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","KeyProviderKeyWrapProtocolInput","KeyProviderKeyWrapProtocolInput","KeyProviderKeyWrapProtocolOutput","KeyProviderKeyWrapProtocolOutput","_PROTOBUF_VERSION_CHECK","borrow","borrow","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","compute_size","compute_size","compute_size_dyn","compute_size_dyn","decode","decode","default","default","default","default","default_instance","default_instance","deref","deref","deref_mut","deref_mut","descriptor","descriptor","descriptor_dyn","descriptor_dyn","drop","drop","encode","encode","eq","eq","file_descriptor","file_descriptor_proto","file_descriptor_proto_data","fmt","fmt","fmt","fmt","free","free","from","from","generated_message_descriptor_data","generated_message_descriptor_data","init","init","into","into","is_initialized","is_initialized","is_initialized_dyn","is_initialized_dyn","merge_from","merge_from","merge_from_dyn","merge_from_dyn","mut_special_fields","mut_special_fields","mut_special_fields_dyn","mut_special_fields_dyn","new","new","new","new","size","size","special_fields","special_fields","special_fields","special_fields","special_fields_dyn","special_fields_dyn","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write_to_with_cached_sizes","write_to_with_cached_sizes","write_to_with_cached_sizes_dyn","write_to_with_cached_sizes_dyn","KeyProviderService","KeyProviderServiceClient","UnWrapKeyMethod","WrapKeyMethod","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","client","clone","clone_into","create_key_provider_service","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","free","free","free","from","from","from","handler","handler","init","init","init","into","into","into","new","service","service","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","un_wrap_key","un_wrap_key","vzip","vzip","vzip","wrap_key","wrap_key","ASYNC_ATTESTATION_AGENT","Cli","DEFAULT_ATTESTATION_SOCKET_ADDR","DEFAULT_GETRESOURCE_SOCKET_ADDR","DEFAULT_KEYPROVIDER_SOCKET_ADDR","DEFAULT_UNIX_SOCKET_DIR","UNIX_SOCKET_PREFIX","__private_field","attestation_sock","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","clean_previous_sock_file","command","command_for_update","deref","deref","deref","deref_mut","deref_mut","drop","drop","fmt","free","free","from","from","from_arg_matches","from_arg_matches_mut","getresource_sock","group_id","init","init","into","into","keyprovider_sock","try_from","try_from","try_into","try_into","ttrpc_main","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","vzip"],"q":[[0,"attestation_agent"],[3,"attestation_agent::rpc"],[25,"attestation_agent::rpc::attestation"],[44,"attestation_agent::rpc::attestation::ttrpc"],[45,"attestation_agent::rpc::getresource"],[63,"attestation_agent::rpc::getresource::ttrpc"],[64,"attestation_agent::rpc::keyprovider"],[122,"attestation_agent::rpc::keyprovider::message"],[338,"attestation_agent::rpc::keyprovider::ttrpc"],[339,"attestation_agent::rpc::ttrpc_protocol"],[345,"attestation_agent::rpc::ttrpc_protocol::attestation_agent"],[537,"attestation_agent::rpc::ttrpc_protocol::attestation_agent_ttrpc"],[594,"attestation_agent::rpc::ttrpc_protocol::getresource"],[694,"attestation_agent::rpc::ttrpc_protocol::getresource_ttrpc"],[733,"attestation_agent::rpc::ttrpc_protocol::keyprovider"],[831,"attestation_agent::rpc::ttrpc_protocol::keyprovider_ttrpc"],[888,"attestation_agent::ttrpc"],[938,"alloc::string"],[939,"core::ptr::non_null"],[940,"core::result"],[941,"core::any"],[942,"core::fmt"],[943,"core::fmt"],[944,"core::future::future"],[945,"alloc::boxed"],[946,"core::pin"],[947,"ttrpc::asynchronous::server"],[948,"std::collections::hash::map"],[949,"anyhow"],[950,"serde::de"],[951,"serde::ser"],[952,"alloc::vec"],[953,"core::convert"],[954,"protobuf::reflect::message"],[955,"alloc::alloc"],[956,"protobuf::reflect::file"],[957,"protobuf::descriptor"],[958,"protobuf::reflect::message::generated"],[959,"protobuf::coded_input_stream"],[960,"protobuf::error"],[961,"protobuf::error"],[962,"protobuf::coded_output_stream"],[963,"alloc::sync"],[964,"ttrpc::context"],[965,"ttrpc::error"],[966,"ttrpc::proto::compiled::ttrpc"],[967,"ttrpc::asynchronous::client"],[968,"clap_builder::builder::command"],[969,"tokio::sync::mutex"],[970,"clap_builder::parser::matches::arg_matches"],[971,"clap_builder"],[972,"clap_builder::util::id"],[973,"core::option"]],"d":["","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generated file from <code>attestation-agent.proto</code>","","Generated file from <code>getresource.proto</code>","","Generated file from <code>keyprovider.proto</code>","","","","","","","","","","Generated files are compatible only with the same version …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>FileDescriptor</code> object which allows dynamic access to files","<code>FileDescriptorProto</code> object which was a source for this …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Generated files are compatible only with the same version …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>FileDescriptor</code> object which allows dynamic access to files","<code>FileDescriptorProto</code> object which was a source for this …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Generated files are compatible only with the same version …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>FileDescriptor</code> object which allows dynamic access to files","<code>FileDescriptorProto</code> object which was a source for this …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attestation ttRPC Unix socket addr.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","GetResource ttRPC Unix socket addr.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","KeyProvider ttRPC Unix socket addr.","","","","","","","","","","",""],"i":[0,0,0,0,0,0,2,0,2,2,2,2,2,2,2,2,0,2,2,0,2,2,0,2,2,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,8,8,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,20,20,0,0,0,0,0,0,0,0,0,0,0,22,23,22,23,22,22,22,23,22,23,22,23,22,22,23,22,22,23,22,23,22,23,22,0,0,23,22,23,22,22,22,0,22,0,22,23,22,22,22,23,22,0,23,22,23,23,22,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,37,26,32,33,34,35,36,37,38,39,26,32,33,34,35,36,37,38,39,26,32,33,34,35,26,32,33,34,35,34,33,26,32,33,34,35,26,32,33,34,35,36,37,38,39,26,32,33,34,35,36,37,38,39,26,32,33,34,35,36,37,38,39,26,32,33,34,35,36,37,38,39,32,33,35,26,32,33,34,35,26,32,33,34,35,36,37,38,39,26,32,33,34,35,36,37,38,39,26,32,33,34,35,36,37,38,39,26,32,33,34,35,36,37,38,39,26,32,33,34,35,36,37,38,39,26,38,26,36,26,32,39,33,35,26,32,33,34,35,36,37,38,39,26,32,33,34,35,26,26,32,33,34,35,36,37,38,39,26,32,33,34,35,36,37,38,39,26,32,33,34,35,36,37,38,39,26,32,34,26,32,33,34,35,36,37,38,39,34,34,34,32,26,26,26,32,0,0,0,0,0,0,0,40,0,0,0,0,12,41,16,0,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,12,40,40,16,16,41,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,0,0,0,12,12,40,40,16,16,41,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,12,40,40,16,16,41,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,12,40,16,41,0,0,0,0,61,63,56,61,63,56,56,56,56,0,61,63,56,61,63,56,61,63,56,61,63,56,61,63,56,56,57,56,57,61,63,61,63,56,61,63,56,56,61,63,56,61,63,56,61,63,56,61,63,56,61,63,56,0,0,21,21,65,21,0,21,65,21,65,21,65,21,65,21,65,21,65,21,65,21,65,21,21,65,65,21,65,21,65,21,65,21,65,21,65,21,65,21,65,21,65,0,0,0,21,21,65,65,21,65,21,65,21,65,21,65,21,65,21,65,21,65,21,65,21,65,21,65,21,65,21,21,65,65,21,65,21,65,21,65,21,65,21,65,21,65,21,65,21,65,21,65,21,65,21,65,21,65,0,0,0,68,66,68,66,66,66,66,0,68,66,68,66,68,66,68,66,68,66,66,67,68,68,66,68,66,66,68,66,68,66,68,66,68,66,68,66,0,31,0,69,0,31,69,31,69,31,69,31,69,31,69,31,69,31,69,31,69,31,31,69,69,31,69,31,69,31,69,31,69,31,69,31,69,31,69,31,69,0,0,0,31,31,69,69,31,69,31,69,31,69,31,69,31,69,31,69,31,69,31,69,31,69,31,69,31,69,31,31,69,69,31,69,31,69,31,69,31,69,31,69,31,69,31,69,31,69,31,69,31,69,31,69,31,69,0,0,0,0,72,73,70,72,73,70,70,70,70,0,72,73,70,72,73,70,72,73,70,72,73,70,72,73,70,72,73,72,73,70,72,73,70,70,72,73,70,72,73,70,72,73,70,72,73,70,70,71,72,73,70,70,71,0,0,0,0,0,0,0,75,78,78,78,75,78,75,78,0,78,78,75,75,78,75,78,75,78,78,75,78,75,78,78,78,78,78,75,78,75,78,78,75,78,75,78,0,75,78,78,78,75,78],"f":[[[],1],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[2,3],[4,-1,[]],[4,-1,[]],[4,1],[[[5,[-1]]],1,[]],[-1,-1,[]],0,[[],4],[-1,-2,[],[]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],0,[-1,7,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],8],[4,-1,[]],[4,-1,[]],[4,1],[[8,9],10],[[[5,[-1]]],1,[]],[-1,-1,[]],[[8,11,12],[[15,[[14,[13]]]]]],[[8,11,16],[[15,[[14,[13]]]]]],[[],4],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],0,[-1,7,[]],[-1,-2,[],[]],[[],[[19,[[18,[3,17]]]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],20],[4,-1,[]],[4,-1,[]],[4,1],[[20,9],10],[[[5,[-1]]],1,[]],[-1,-1,[]],[[20,11,21],[[15,[[14,[13]]]]]],[[],4],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],0,[-1,7,[]],[-1,-2,[],[]],[[],[[19,[[18,[3,17]]]]]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[22,22],[[-1,-2],1,[],[]],[[],23],[[],22],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[-1,[[6,[22]]],24],[4,1],[4,1],[[22,22],25],[[23,9],10],[[22,9],10],[[[5,[-1]]],1,[]],[[[5,[-1]]],1,[]],[-1,-1,[]],[-1,-1,[]],[26,[[19,[3]]]],[26,[[19,[[1,[3,3]]]]]],[[],4],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[22,-1],6,27],[28,[[19,[[1,[3,3]]]]]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[26,[[19,[22]]]],[[[30,[29]]],[[19,[22]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],0,[-1,7,[]],[-1,7,[]],[[23,11,31],[[15,[[14,[13]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[23,11,31],[[15,[[14,[13]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[26,26],[32,32],[33,33],[34,34],[35,35],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,[[],26],[[],32],[[],33],[[],34],[[],35],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[-1,[[6,[26]]],24],[-1,[[6,[32]]],24],[-1,[[6,[33]]],24],[-1,[[6,[34]]],24],[-1,[[6,[35]]],24],[-1,[[6,[36]]],24],[-1,[[6,[37]]],24],[-1,[[6,[38]]],24],[-1,[[6,[39]]],24],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],0,[33,25],[35,25],[[26,26],25],[[32,32],25],[[33,33],25],[[34,34],25],[[35,35],25],[[26,9],10],[[32,9],10],[[33,9],10],[[34,9],10],[[35,9],10],[[36,9],10],[[37,9],10],[[38,9],10],[[39,9],10],[[[5,[-1]]],1,[]],[[[5,[-1]]],1,[]],[[[5,[-1]]],1,[]],[[[5,[-1]]],1,[]],[[[5,[-1]]],1,[]],[[[5,[-1]]],1,[]],[[[5,[-1]]],1,[]],[[[5,[-1]]],1,[]],[[[5,[-1]]],1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[26,-1],6,27],[[32,-1],6,27],[[33,-1],6,27],[[34,-1],6,27],[[35,-1],6,27],[[36,-1],6,27],[[37,-1],6,27],[[38,-1],6,27],[[39,-1],6,27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[[[30,[29]]],[[19,[26]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[26,[[19,[1]]]],[32,[[19,[1]]]],[34,[[19,[1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[34,3],34],[[34,3],34],[[34,35],34],[[32,33],32],[[26,34],26],[[26,32],26],[[26,3],26],[[32,3],32],[[],[[19,[[18,[3,17]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[12,1],[40,1],[16,1],[41,1],[12,12],[40,40],[16,16],[41,41],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[12,42],[40,42],[16,42],[41,42],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,[[6,[-2]]],[[44,[[43,[29]]]]],[]],[-1,[[6,[-2]]],[[44,[[43,[29]]]]],[]],[-1,[[6,[-2]]],[[44,[[43,[29]]]]],[]],[-1,[[6,[-2]]],[[44,[[43,[29]]]]],[]],[[],12],[[],12],[[],40],[[],40],[[],16],[[],16],[[],41],[[],41],[[],12],[[],40],[[],16],[[],41],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[[],45],[[],45],[[],45],[[],45],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[4,1],[4,1],[4,1],[4,1],[-1,[[6,[[30,[29,46]]]]],[]],[-1,[[6,[[30,[29,46]]]]],[]],[-1,[[6,[[30,[29,46]]]]],[]],[-1,[[6,[[30,[29,46]]]]],[]],[[12,12],25],[[40,40],25],[[16,16],25],[[41,41],25],[[],47],[[],48],0,[[12,9],10],[[12,9],10],[[40,9],10],[[40,9],10],[[16,9],10],[[16,9],10],[[41,9],10],[[41,9],10],[[[5,[-1]]],1,[]],[[[5,[-1]]],1,[]],[[[5,[-1]]],1,[]],[[[5,[-1]]],1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],49],[[],49],[[],49],[[],49],[[],4],[[],4],[[],4],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[12,25],[40,25],[16,25],[41,25],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[[12,50],[[51,[1]]]],[[40,50],[[51,[1]]]],[[16,50],[[51,[1]]]],[[41,50],[[51,[1]]]],[[-1,50],[[6,[1,52]]],[]],[[-1,50],[[6,[1,52]]],[]],[[-1,50],[[6,[1,52]]],[]],[[-1,50],[[6,[1,52]]],[]],[12,53],[40,53],[16,53],[41,53],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[[],12],[[],12],[[],40],[[],40],[[],16],[[],16],[[],41],[[],41],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[12,53],[40,53],[16,53],[41,53],0,0,0,0,[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[12,55],[[51,[1]]]],[[40,55],[[51,[1]]]],[[16,55],[[51,[1]]]],[[41,55],[[51,[1]]]],[[-1,55],[[6,[1,52]]],[]],[[-1,55],[[6,[1,52]]],[]],[[-1,55],[[6,[1,52]]],[]],[[-1,55],[[6,[1,52]]],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[56,56],[[-1,-2],1,[],[]],[[[58,[[14,[57]]]]],[[18,[3,17]]]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,1],[4,1],[4,1],[[[5,[-1]]],1,[]],[[[5,[-1]]],1,[]],[[[5,[-1]]],1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[56,59,12],[[60,[40]]]],[[-1,11,12],[[15,[[14,[13]]]]],[]],[[56,59,16],[[60,[41]]]],[[-1,11,16],[[15,[[14,[13]]]]],[]],[[61,11,62],[[15,[[14,[13]]]]]],[[63,11,62],[[15,[[14,[13]]]]]],[[],4],[[],4],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[64,56],0,0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,1],[65,1],[21,21],[65,65],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[21,42],[65,42],[-1,42,[]],[-1,42,[]],[-1,[[6,[-2]]],[[44,[[43,[29]]]]],[]],[-1,[[6,[-2]]],[[44,[[43,[29]]]]],[]],[[],21],[[],21],[[],65],[[],65],[[],21],[[],65],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[[],45],[[],45],[-1,45,[]],[-1,45,[]],[4,1],[4,1],[-1,[[6,[[30,[29,46]]]]],[]],[-1,[[6,[[30,[29,46]]]]],[]],[[21,21],25],[[65,65],25],[[],47],[[],48],0,[[21,9],10],[[21,9],10],[[65,9],10],[[65,9],10],[[[5,[-1]]],1,[]],[[[5,[-1]]],1,[]],[-1,-1,[]],[-1,-1,[]],[[],49],[[],49],[[],4],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],[21,25],[65,25],[-1,25,[]],[-1,25,[]],[[21,50],[[51,[1]]]],[[65,50],[[51,[1]]]],[[-1,50],[[6,[1,52]]],[]],[[-1,50],[[6,[1,52]]],[]],[21,53],[65,53],[-1,53,[]],[-1,53,[]],[[],21],[[],21],[[],65],[[],65],[-1,54,[]],[-1,54,[]],[21,53],[65,53],0,0,[-1,53,[]],[-1,53,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,3,[]],[-1,3,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[21,55],[[51,[1]]]],[[65,55],[[51,[1]]]],[[-1,55],[[6,[1,52]]],[]],[[-1,55],[[6,[1,52]]],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[66,66],[[-1,-2],1,[],[]],[[[58,[[14,[67]]]]],[[18,[3,17]]]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,1],[4,1],[[[5,[-1]]],1,[]],[[[5,[-1]]],1,[]],[-1,-1,[]],[-1,-1,[]],[[66,59,21],[[60,[65]]]],[[-1,11,21],[[15,[[14,[13]]]]],[]],[[68,11,62],[[15,[[14,[13]]]]]],[[],4],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],[64,66],0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[31,1],[69,1],[31,31],[69,69],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[31,42],[69,42],[-1,42,[]],[-1,42,[]],[-1,[[6,[-2]]],[[44,[[43,[29]]]]],[]],[-1,[[6,[-2]]],[[44,[[43,[29]]]]],[]],[[],31],[[],31],[[],69],[[],69],[[],31],[[],69],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[[],45],[[],45],[-1,45,[]],[-1,45,[]],[4,1],[4,1],[-1,[[6,[[30,[29,46]]]]],[]],[-1,[[6,[[30,[29,46]]]]],[]],[[31,31],25],[[69,69],25],[[],47],[[],48],0,[[31,9],10],[[31,9],10],[[69,9],10],[[69,9],10],[[[5,[-1]]],1,[]],[[[5,[-1]]],1,[]],[-1,-1,[]],[-1,-1,[]],[[],49],[[],49],[[],4],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],[31,25],[69,25],[-1,25,[]],[-1,25,[]],[[31,50],[[51,[1]]]],[[69,50],[[51,[1]]]],[[-1,50],[[6,[1,52]]],[]],[[-1,50],[[6,[1,52]]],[]],[31,53],[69,53],[-1,53,[]],[-1,53,[]],[[],31],[[],31],[[],69],[[],69],[-1,54,[]],[-1,54,[]],[31,53],[69,53],0,0,[-1,53,[]],[-1,53,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,3,[]],[-1,3,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[31,55],[[51,[1]]]],[[69,55],[[51,[1]]]],[[-1,55],[[6,[1,52]]],[]],[[-1,55],[[6,[1,52]]],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[70,70],[[-1,-2],1,[],[]],[[[58,[[14,[71]]]]],[[18,[3,17]]]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,1],[4,1],[4,1],[[[5,[-1]]],1,[]],[[[5,[-1]]],1,[]],[[[5,[-1]]],1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[72,11,62],[[15,[[14,[13]]]]]],[[73,11,62],[[15,[[14,[13]]]]]],[[],4],[[],4],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[64,70],0,0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[[70,59,31],[[60,[69]]]],[[-1,11,31],[[15,[[14,[13]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[70,59,31],[[60,[69]]]],[[-1,11,31],[[15,[[14,[13]]]]],[]],0,0,0,0,0,0,0,0,0,[74,74],[74,74],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,[[19,[1]]]],[[],74],[[],74],[75,[[58,[[77,[76]]]]]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,1],[4,1],[[78,9],10],[[[5,[-1]]],1,[]],[[[5,[-1]]],1,[]],[-1,-1,[]],[-1,-1,[]],[79,[[6,[78,80]]]],[79,[[6,[78,80]]]],0,[[],[[82,[81]]]],[[],4],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[[],[[19,[1]]]],[-1,7,[]],[-1,7,[]],[[78,79],[[6,[1,80]]]],[[78,79],[[6,[1,80]]]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[15,"tuple"],[3,"ABOUT",3],[3,"String",938],[15,"usize"],[3,"NonNull",939],[4,"Result",940],[3,"TypeId",941],[3,"Attestation",25],[3,"Formatter",942],[6,"Result",942],[3,"TtrpcContext",943],[3,"GetEvidenceRequest",345],[8,"Future",944],[3,"Box",945],[3,"Pin",946],[3,"GetTokenRequest",345],[3,"Service",947],[3,"HashMap",948],[6,"Result",949],[3,"GetResource",45],[3,"GetResourceRequest",594],[3,"InputPayload",64],[3,"KeyProvider",64],[8,"Deserializer",950],[15,"bool"],[3,"KeyProviderInput",122],[8,"Serializer",951],[15,"str"],[15,"u8"],[3,"Vec",952],[3,"KeyProviderKeyWrapProtocolInput",733],[3,"KeyWrapParams",122],[3,"Ec",122],[3,"KeyUnwrapParams",122],[3,"Dc",122],[3,"KeyWrapOutput",122],[3,"KeyWrapResults",122],[3,"KeyUnwrapOutput",122],[3,"KeyUnwrapResults",122],[3,"GetEvidenceResponse",345],[3,"GetTokenResponse",345],[15,"u64"],[15,"slice"],[8,"AsRef",953],[3,"MessageDescriptor",954],[3,"Global",955],[3,"FileDescriptor",956],[3,"FileDescriptorProto",957],[3,"GeneratedMessageDescriptorData",958],[3,"CodedInputStream",959],[6,"Result",960],[3,"Error",960],[3,"SpecialFields",961],[15,"u32"],[3,"CodedOutputStream",962],[3,"AttestationAgentServiceClient",537],[8,"AttestationAgentService",537],[3,"Arc",963],[3,"Context",964],[6,"Result",965],[3,"GetEvidenceMethod",537],[3,"Request",966],[3,"GetTokenMethod",537],[3,"Client",967],[3,"GetResourceResponse",594],[3,"GetResourceServiceClient",694],[8,"GetResourceService",694],[3,"GetResourceMethod",694],[3,"KeyProviderKeyWrapProtocolOutput",733],[3,"KeyProviderServiceClient",831],[8,"KeyProviderService",831],[3,"WrapKeyMethod",831],[3,"UnWrapKeyMethod",831],[3,"Command",968],[3,"ASYNC_ATTESTATION_AGENT",888],[3,"AttestationAgent",0],[3,"Mutex",969],[3,"Cli",888],[3,"ArgMatches",970],[6,"Error",971],[3,"Id",972],[4,"Option",973]]},\
"attester":{"doc":"","t":"IGAAAFKAAAALDLLLFLLLLLLLLLDLLLLFDLFLLLLLLLLLLLLLLLLDLLLFLLLLLLLLLDLLLFLLLLLLLLLDLLLFLLLLLLLLLDLLLFLLLLLLLLLDLLLFLLLLLLLLL","n":["Attester","BoxedAttester","az_snp_vtpm","cca","csv","detect_tee_type","get_evidence","sample","sgx_dcap","snp","tdx","try_from","AzSnpVtpmAttester","borrow","borrow_mut","default","detect_platform","fmt","free","from","get_evidence","into","try_from","try_into","type_id","vzip","CCAAttester","borrow","borrow","borrow_mut","borrow_mut","cca_attestation_request","cca_ioctl_request","default","detect_platform","fmt","free","free","from","from","get_evidence","into","into","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CsvAttester","borrow","borrow_mut","default","detect_platform","fmt","free","from","get_evidence","into","try_from","try_into","type_id","vzip","SampleAttester","borrow","borrow_mut","default","detect_platform","fmt","free","from","get_evidence","into","try_from","try_into","type_id","vzip","SgxDcapAttester","borrow","borrow_mut","default","detect_platform","fmt","free","from","get_evidence","into","try_from","try_into","type_id","vzip","SnpAttester","borrow","borrow_mut","default","detect_platform","fmt","free","from","get_evidence","into","try_from","try_into","type_id","vzip","TdxAttester","borrow","borrow_mut","default","detect_platform","fmt","free","from","get_evidence","into","try_from","try_into","type_id","vzip"],"q":[[0,"attester"],[12,"attester::az_snp_vtpm"],[26,"attester::cca"],[51,"attester::csv"],[65,"attester::sample"],[79,"attester::sgx_dcap"],[93,"attester::snp"],[107,"attester::tdx"],[121,"kbs_types"],[122,"core::option"],[123,"alloc::vec"],[124,"core::future::future"],[125,"alloc::boxed"],[126,"core::pin"],[127,"anyhow"],[128,"core::fmt"],[129,"core::fmt"],[130,"core::result"],[131,"core::any"],[132,"libc::unix"],[133,"nix"]],"d":["","","","","","","Call the hardware driver to get the Hardware specific …","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,0,0,27,0,0,0,0,8,0,10,10,10,0,10,10,10,10,10,10,10,10,10,0,19,21,19,21,0,0,21,0,21,19,21,19,21,21,19,21,19,21,19,21,19,21,19,21,0,22,22,22,0,22,22,22,22,22,22,22,22,22,0,23,23,23,0,23,23,23,23,23,23,23,23,23,0,24,24,24,0,24,24,24,24,24,24,24,24,24,0,25,25,25,0,25,25,25,25,25,25,25,25,25,0,26,26,26,0,26,26,26,26,26,26,26,26,26],"f":[0,0,0,0,0,[[],[[2,[1]]]],[[-1,[4,[3]]],[[7,[[6,[5]]]]],[]],0,0,0,0,[1,[[9,[8]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],10],[[],11],[[10,12],13],[[[14,[-1]]],15,[]],[-1,-1,[]],[[10,[4,[3]]],[[7,[[6,[5]]]]]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[18,19],[[20,[18]]]],0,[[],21],[[],11],[[21,12],13],[[[14,[-1]]],15,[]],[[[14,[-1]]],15,[]],[-1,-1,[]],[-1,-1,[]],[[21,[4,[3]]],[[7,[[6,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],22],[[],11],[[22,12],13],[[[14,[-1]]],15,[]],[-1,-1,[]],[[22,[4,[3]]],[[7,[[6,[5]]]]]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],23],[[],11],[[23,12],13],[[[14,[-1]]],15,[]],[-1,-1,[]],[[23,[4,[3]]],[[7,[[6,[5]]]]]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],24],[[],11],[[24,12],13],[[[14,[-1]]],15,[]],[-1,-1,[]],[[24,[4,[3]]],[[7,[[6,[5]]]]]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],25],[[],11],[[25,12],13],[[[14,[-1]]],15,[]],[-1,-1,[]],[[25,[4,[3]]],[[7,[[6,[5]]]]]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],26],[[],11],[[26,12],13],[[[14,[-1]]],15,[]],[-1,-1,[]],[[26,[4,[3]]],[[7,[[6,[5]]]]]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[-1,-2,[],[]]],"c":[],"p":[[4,"Tee",121],[4,"Option",122],[15,"u8"],[3,"Vec",123],[8,"Future",124],[3,"Box",125],[3,"Pin",126],[6,"BoxedAttester",0],[6,"Result",127],[3,"AzSnpVtpmAttester",12],[15,"bool"],[3,"Formatter",128],[6,"Result",128],[3,"NonNull",129],[15,"tuple"],[4,"Result",130],[3,"TypeId",131],[6,"c_int",132],[3,"cca_ioctl_request",26],[6,"Result",133],[3,"CCAAttester",26],[3,"CsvAttester",51],[3,"SampleAttester",65],[3,"SgxDcapAttester",79],[3,"SnpAttester",93],[3,"TdxAttester",107],[8,"Attester",0]]},\
"coco_keyprovider":{"doc":"","t":"DLLMLLLLALLLLLALLMFMLLLLLLDRRDRMLLLLALFLLFLLLLMAMMMFFMLLLLLLLLLMMNNERLLLFLLLLLLLLLLRFDMLLLLLMALAFLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLMMAALLLLLLLLLLDLLLLLLLLLMLLLLLLLLLLLLLLLIDDLMLLLLLLLLLLLLLLLLLMLLLLLLMLMLLLLMLLLLLLLLKLLLKADDDDDDDDDMMLLLLLLLLLLLLLLLLLLMMLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Cli","augment_args","augment_args_for_update","auth_private_key","borrow","borrow_mut","command","command_for_update","enc_mods","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","grpc","into","into_request","kbs","main","socket","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","AnnotationPacket","DEFAULT_KEY_REPO_PATH","HARD_CODED_KEYID","InputParams","KBS_RESOURCE_URL_PREFIX","algorithm","borrow","borrow","borrow_mut","borrow_mut","crypto","deserialize","enc_optsdata_gen_anno","from","from","generate_key_parameters","into","into","into_request","into_request","iv","kbs","keyid","keypath","kid","normalize_path","parse_input_params","sample","serialize","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","wrap_type","wrapped_data","A256CTR","A256GCM","Algorithm","HARDCODED_KEY","borrow","borrow_mut","default","encrypt","from","from_str","into","into_request","to_string","try_from","try_from","try_into","type_id","vzip","KBS_URL_PATH_PREFIX","register_kek","KeyProvider","auth_private_key","borrow","borrow_mut","from","into","into_request","kbs","key_provider","new","protocol","start_service","try_from","try_into","type_id","un_wrap_key","vzip","wrap_key","KeyProviderKeyWrapProtocolInput","KeyProviderKeyWrapProtocolOutput","borrow","borrow","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","default","default","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","from_ref","from_ref","into","into","into_request","into_request","key_provider_key_wrap_protocol_input","key_provider_key_wrap_protocol_output","key_provider_service_client","key_provider_service_server","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","KeyProviderServiceClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","fmt","from","from_ref","inner","into","into_request","max_decoding_message_size","max_encoding_message_size","new","send_compressed","to_owned","try_from","try_into","type_id","un_wrap_key","vzip","with_interceptor","with_origin","wrap_key","KeyProviderService","KeyProviderServiceServer","_Inner","accept_compressed","accept_compression_encodings","borrow","borrow","borrow_mut","borrow_mut","call","call","clone","clone","clone_into","clone_into","fmt","fmt","from","from","from_arc","from_ref","from_ref","inner","into","into","into_make_service","into_request","into_request","max_decoding_message_size","max_decoding_message_size","max_encoding_message_size","max_encoding_message_size","new","poll_ready","poll_ready","send_compressed","send_compression_encodings","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","un_wrap_key","vzip","vzip","with_interceptor","wrap_key","keyprovider_structs","Dc","Ec","KeyProviderInput","KeyUnwrapOutput","KeyUnwrapParams","KeyUnwrapResults","KeyWrapOutput","KeyWrapParams","KeyWrapResults","annotation","annotation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","dc","decrypt_config","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","ec","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","keyunwrapparams","keyunwrapresults","keywrapparams","keywrapresults","op","optsdata","optsdata","parameters","parameters","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"coco_keyprovider"],[26,"coco_keyprovider::enc_mods"],[65,"coco_keyprovider::enc_mods::crypto"],[83,"coco_keyprovider::enc_mods::kbs"],[85,"coco_keyprovider::grpc"],[103,"coco_keyprovider::grpc::key_provider"],[145,"coco_keyprovider::grpc::key_provider::key_provider_service_client"],[171,"coco_keyprovider::grpc::key_provider::key_provider_service_server"],[221,"coco_keyprovider::grpc::protocol"],[222,"coco_keyprovider::grpc::protocol::keyprovider_structs"],[353,"clap_builder::builder::command"],[354,"core::fmt"],[355,"core::fmt"],[356,"clap_builder"],[357,"core::result"],[358,"clap_builder::util::id"],[359,"core::option"],[360,"tonic::request"],[361,"anyhow"],[362,"core::any"],[363,"serde::de"],[364,"url"],[365,"jwt_simple::algorithms::eddsa"],[366,"alloc::string"],[367,"alloc::vec"],[368,"serde::ser"],[369,"core::net::socket_addr"],[370,"std::path"],[371,"core::future::future"],[372,"alloc::boxed"],[373,"core::pin"],[374,"tonic::codec::compression"],[375,"tonic::body"],[376,"tonic::client::service"],[377,"core::clone"],[378,"tonic::transport::channel"],[379,"tonic::transport::error"],[380,"tonic::transport::channel::endpoint"],[381,"core::convert"],[382,"core::fmt"],[383,"tonic::status"],[384,"tonic::request"],[385,"http::request"],[386,"tower_service"],[387,"tonic::service::interceptor"],[388,"http_body"],[389,"core::marker"],[390,"alloc::sync"],[391,"axum::routing::into_make_service"],[392,"core::task::wake"],[393,"core::task::poll"]],"d":["","","","Private key used to authenticate the resource registration …","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","Address of Key Broker Service. If both <code>auth_private_key</code> and","","Socket address (IP:port) to listen to, e.g. …","","","","","","","<code>AnnotationPacket</code> is what a encrypted image layer’s …","When a KEK is randomly generated, a new kid will be …","","","","Encryption algorithm, included in the <code>wrap_type</code> field of …","","","","","","","The input params vector should only have one element. The …","Returns the argument unchanged.","Returns the argument unchanged.","This function will generate (key, iv, keyid) for given …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Specify the KEK of this image. keyid field will be …","Specify the KEK to encrypted the image in local …","","Normalize the given keyid into (kbs addr, key path), s.t. …","","Whether this image is encrypted by sample key provider. By …","","","","","","","","","","","","","","","Only for sample","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","Register the given key with kid into the kbs. This request …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Generated client implementations.","Generated server implementations.","","","","","","","","","","","","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Compress requests with the given encoding.","","","","","","","","","","Generated trait containing gRPC methods that should be …","","","Enable decompressing requests with the given encoding.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Limits the maximum size of a decoded message.","","Limits the maximum size of an encoded message.","","","","","Compress responses with the given encoding, if the client …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,2,2,2,2,2,2,2,0,2,2,2,2,2,0,2,2,2,0,2,2,2,2,2,2,2,0,0,0,0,0,22,22,14,22,14,0,14,0,22,14,0,22,14,22,14,14,0,22,22,14,0,0,22,14,22,14,22,14,22,14,22,14,14,14,25,25,0,0,25,25,25,0,25,25,25,25,25,25,25,25,25,25,0,0,0,26,26,26,26,26,26,26,0,26,0,0,26,26,26,26,26,26,0,0,29,33,29,33,29,33,29,33,29,33,29,33,29,33,29,33,29,33,29,33,29,33,29,33,29,33,29,33,0,0,29,33,29,33,29,33,29,33,29,33,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,0,0,54,54,58,54,58,54,54,54,58,54,58,54,58,54,58,54,54,58,54,54,58,54,54,58,54,54,54,54,54,54,54,54,54,54,58,54,58,54,58,54,58,54,55,58,54,54,55,0,0,0,0,0,0,0,0,0,0,66,69,63,64,65,66,67,68,69,70,71,63,64,65,66,67,68,69,70,71,66,65,63,64,65,66,67,68,69,70,71,64,63,64,65,66,67,68,69,70,71,63,64,65,66,67,68,69,70,71,63,64,65,66,67,68,69,70,71,63,64,65,66,67,68,69,70,71,63,70,63,68,63,64,71,65,67,63,64,65,66,67,68,69,70,71,63,64,65,66,67,68,69,70,71,63,64,65,66,67,68,69,70,71,63,64,65,66,67,68,69,70,71,63,64,65,66,67,68,69,70,71],"f":[0,[1,1],[1,1],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[],1],0,[[2,3],4],[-1,-1,[]],[5,[[7,[2,6]]]],[5,[[7,[2,6]]]],[[],[[9,[8]]]],0,[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],0,[[],[[12,[11]]]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,13,[]],[[2,5],[[7,[11,6]]]],[[2,5],[[7,[11,6]]]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[7,[14]]],15],[[[11,[[9,[16]],[9,[17]]]],[19,[18]],[21,[20]]],[[12,[20]]]],[-1,-1,[]],[-1,-1,[]],[22,[[12,[[11,[[21,[18]],[21,[18]],20]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],0,0,0,0,0,[23,[[12,[[11,[20,20]]]]]],[23,[[12,[22]]]],0,[[14,-1],7,24],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],25],[[[19,[18]],[19,[18]],[19,[18]],25],[[12,[[21,[18]]]]]],[-1,-1,[]],[23,[[7,[25]]]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[25,20],[23,[[7,[25]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,13,[]],[-1,-2,[],[]],0,[[17,16,[21,[18]],23],[[12,[11]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],0,0,[[[9,[17]],[9,[20]]],[[12,[26]]]],0,[[27,[9,[28]],[9,[20]]],[[12,[11]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,13,[]],[[26,[10,[29]]],[[32,[[31,[30]]]]]],[-1,-2,[],[]],[[26,[10,[29]]],[[32,[[31,[30]]]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[29,11],[33,11],[29,29],[33,33],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[],29],[[],33],[29,34],[33,34],[[29,29],35],[[33,33],35],[[29,3],4],[[33,3],4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[36,[-1]],37],[[36,[-1]]],[[39,[38]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[36,[-1]]],[[36,[-1]]],40],[[-1,-2],11,[],[]],[-1,[[7,[[36,[41]],42]]],[[44,[43]]]],[[[36,[-1]],3],4,45],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[[[36,[-1]],34],[[36,[-1]]],[[39,[38]]]],[[[36,[-1]],34],[[36,[-1]]],[[39,[38]]]],[-1,[[36,[-1]]],[[39,[38]]]],[[[36,[-1]],37],[[36,[-1]]],[[39,[38]]]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,13,[]],[[[36,[-1]],-2],[[7,[[46,[33]],47]]],[[39,[38]]],[[48,[29]]]],[-1,-2,[],[]],[[-1,-2],[[36,[[49,[-1,-2]]]]],[[51,[[50,[38]]]],[39,[38]]],52],[[-1,53],[[36,[-1]]],[[39,[38]]]],[[[36,[-1]],-2],[[7,[[46,[33]],47]]],[[39,[38]]],[[48,[29]]]],0,0,0,[[[54,[-1]],37],[[54,[-1]]],55],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[54,[-1]],[50,[-2]]],[],55,[56,57]],[[-1,[50,[-2]]],[],[],[]],[[[58,[-1]]],[[58,[-1]]],55],[[[54,[-1]]],[[54,[-1]]],55],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[[58,[-1]],3],4,45],[[[54,[-1]],3],4,[45,55]],[-1,-1,[]],[-1,-1,[]],[[[59,[-1]]],[[54,[-1]]],55],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[60,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[[[54,[-1]],34],[[54,[-1]]],55],0,[[[54,[-1]],34],[[54,[-1]]],55],0,[-1,[[54,[-1]]],55],[[-1,61],[[62,[[7,[11]]]]],[]],[[[54,[-1]],61],[[62,[[7,[11]]]]],55],[[[54,[-1]],37],[[54,[-1]]],55],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[[-1,[10,[29]]],[[32,[[31,[30]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[49,[[54,[-1]],-2]]],55,52],[[-1,[10,[29]]],[[32,[[31,[30]]]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,[[7,[63]]],15],[-1,[[7,[64]]],15],[-1,[[7,[65]]],15],[-1,[[7,[66]]],15],[-1,[[7,[67]]],15],[-1,[[7,[68]]],15],[-1,[[7,[69]]],15],[-1,[[7,[70]]],15],[-1,[[7,[71]]],15],0,[[63,3],4],[[64,3],4],[[65,3],4],[[66,3],4],[[67,3],4],[[68,3],4],[[69,3],4],[[70,3],4],[[71,3],4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],0,0,0,0,0,0,0,0,0,[[63,-1],7,24],[[64,-1],7,24],[[65,-1],7,24],[[66,-1],7,24],[[67,-1],7,24],[[68,-1],7,24],[[69,-1],7,24],[[70,-1],7,24],[[71,-1],7,24],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Command",353],[3,"Cli",0],[3,"Formatter",354],[6,"Result",354],[3,"ArgMatches",355],[6,"Error",356],[4,"Result",357],[3,"Id",358],[4,"Option",359],[3,"Request",360],[15,"tuple"],[6,"Result",361],[3,"TypeId",362],[3,"AnnotationPacket",26],[8,"Deserializer",363],[3,"Url",364],[3,"Ed25519KeyPair",365],[15,"u8"],[15,"slice"],[3,"String",366],[3,"Vec",367],[3,"InputParams",26],[15,"str"],[8,"Serializer",368],[4,"Algorithm",65],[3,"KeyProvider",85],[4,"SocketAddr",369],[3,"PathBuf",370],[3,"KeyProviderKeyWrapProtocolInput",103],[8,"Future",371],[3,"Box",372],[3,"Pin",373],[3,"KeyProviderKeyWrapProtocolOutput",103],[15,"usize"],[15,"bool"],[3,"KeyProviderServiceClient",145],[4,"CompressionEncoding",374],[6,"BoxBody",375],[8,"GrpcService",376],[8,"Clone",377],[3,"Channel",378],[3,"Error",379],[3,"Endpoint",380],[8,"TryInto",381],[8,"Debug",354],[3,"Response",382],[3,"Status",383],[8,"IntoRequest",360],[3,"InterceptedService",384],[3,"Request",385],[8,"Service",386],[8,"Interceptor",384],[3,"Uri",387],[3,"KeyProviderServiceServer",171],[8,"KeyProviderService",171],[8,"Body",388],[8,"Send",389],[3,"_Inner",171],[3,"Arc",390],[3,"IntoMakeService",391],[3,"Context",392],[4,"Poll",393],[3,"KeyProviderInput",222],[3,"KeyWrapParams",222],[3,"Ec",222],[3,"KeyUnwrapParams",222],[3,"Dc",222],[3,"KeyWrapOutput",222],[3,"KeyWrapResults",222],[3,"KeyUnwrapOutput",222],[3,"KeyUnwrapResults",222]]},\
"confidential_data_hub":{"doc":"","t":"AAAAIKKKNENNNGNLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLL","n":["api","auth","error","hub","DataHub","get_resource","unseal_secret","unwrap_key","Err","Error","GetResource","InitializationFailed","Ok","Result","UnsealSecret","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","free","from","init","into","into_request","to_string","try_from","try_into","type_id","vzip","Hub","borrow","borrow_mut","deref","deref_mut","drop","free","from","get_resource","init","into","into_request","new","try_from","try_into","type_id","unseal_secret","unwrap_key","vzip"],"q":[[0,"confidential_data_hub"],[4,"confidential_data_hub::api"],[8,"confidential_data_hub::error"],[32,"confidential_data_hub::hub"],[51,"alloc::string"],[52,"core::future::future"],[53,"alloc::boxed"],[54,"core::pin"],[55,"alloc::vec"],[56,"core::fmt"],[57,"core::fmt"],[58,"tonic::request"],[59,"core::result"],[60,"core::any"]],"d":["","","","","The APIs of the DataHub. See …","Get the resource due to the given KBS Resource URI. The …","Unseal the given sealed secret. The sealed secret format …","Unwrap the LEK inside the image annotation. This API is …","Contains the error value","","","","Contains the success value","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,19,19,19,18,0,10,10,18,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17],"f":[0,0,0,0,0,[[-1,1],[[4,[[3,[2]]]]],[]],[[-1,[6,[5]]],[[4,[[3,[2]]]]],[]],[[-1,[7,[5]]],[[4,[[3,[2]]]]],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[8,-1,[]],[8,-1,[]],[8,9],[[10,11],12],[[10,11],12],[[[13,[-1]]],9,[]],[-1,-1,[]],[[],8],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,1,[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,16,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[8,-1,[]],[8,-1,[]],[8,9],[[[13,[-1]]],9,[]],[-1,-1,[]],[[17,1],[[4,[[3,[2]]]]]],[[],8],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[[],[[18,[17]]]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,16,[]],[[17,[6,[5]]],[[4,[[3,[2]]]]]],[[17,[7,[5]]],[[4,[[3,[2]]]]]],[-1,-2,[],[]]],"c":[],"p":[[3,"String",51],[8,"Future",52],[3,"Box",53],[3,"Pin",54],[15,"u8"],[3,"Vec",55],[15,"slice"],[15,"usize"],[15,"tuple"],[4,"Error",8],[3,"Formatter",56],[6,"Result",56],[3,"NonNull",57],[3,"Request",58],[4,"Result",59],[3,"TypeId",60],[3,"Hub",32],[6,"Result",8],[8,"DataHub",4]]},\
"crypto":{"doc":"Crypto","t":"NNELLLLLFLFLLLLLALLLLLLNNEDRRLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Aes256Ctr","Aes256Gcm","WrapType","as_ref","borrow","borrow_mut","clone","clone_into","decrypt","deserialize","encrypt","eq","fmt","from","from_str","into","rsa","serialize","to_owned","try_from","try_from","try_into","type_id","OAEP","PKCS1v15","PaddingMode","RSAKeyPair","RSA_KTY","RSA_PUBKEY_LENGTH","as_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","decrypt","e","fmt","from","from","from_pkcs1_pem","from_str","into","into","n","new","to_owned","to_pkcs1_pem","try_from","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"crypto"],[23,"crypto::rsa"],[56,"alloc::vec"],[57,"zeroize"],[58,"anyhow"],[59,"core::result"],[60,"serde::de"],[61,"core::fmt"],[62,"core::fmt"],[63,"core::any"],[64,"alloc::string"]],"d":["This type is not recommended as it is not AEAD.","The serialized name follows 5.2.6 section …","Supported WrapType, s.t. encryption algorithm using to …","","","","","","Decrypt the given <code>ciphertext</code>. Note:","","Encrypt the given <code>plaintext</code>. Note:","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Definations of different Padding mode for encryption. …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,15,15,0,0,0,0,15,16,15,16,15,16,16,16,16,16,16,15,16,15,16,15,16,16,16,16,16,15,15,16,15,16,15],"f":[0,0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],3,[],[]],[[[6,[[5,[4]]]],[5,[4]],[5,[4]],1],[[7,[[5,[4]]]]]],[-1,[[8,[1]]],9],[[[6,[[5,[4]]]],[5,[4]],[5,[4]],1],[[7,[[5,[4]]]]]],[[1,1],10],[[1,11],12],[-1,-1,[]],[2,[[8,[1]]]],[-1,-2,[],[]],0,[[1,-1],8,13],[-1,-2,[],[]],[2,[[8,[1]]]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,14,[]],0,0,0,0,0,0,[15,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[16,16],[[-1,-2],3,[],[]],[[16,15,[5,[4]]],[[7,[[5,[4]]]]]],[16,[[5,[4]]]],[[16,11],12],[-1,-1,[]],[-1,-1,[]],[2,[[7,[16]]]],[2,[[8,[15]]]],[-1,-2,[],[]],[-1,-2,[],[]],[16,[[5,[4]]]],[[],[[7,[16]]]],[-1,-2,[],[]],[16,[[7,[[6,[17]]]]]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[2,[[8,[15]]]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,14,[]],[-1,14,[]]],"c":[],"p":[[4,"WrapType",0],[15,"str"],[15,"tuple"],[15,"u8"],[3,"Vec",56],[3,"Zeroizing",57],[6,"Result",58],[4,"Result",59],[8,"Deserializer",60],[15,"bool"],[3,"Formatter",61],[6,"Result",61],[8,"Serializer",62],[3,"TypeId",63],[4,"PaddingMode",23],[3,"RSAKeyPair",23],[3,"String",64]]},\
"image_rs":{"doc":"","t":"RRAAAAAAAAAAAAAADDRALLLLFLLLLLLLLLLLLLLLLLLLLLLFRRRFRRRDDRDDRDRRMMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMMMLLLLLLLLLLLLLLLMMMMMMLLLMLLLLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMERNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLMLLLLLRRIENNLLLLKLKLLLLLLLLLRDDDLLLLLLLLLLMMMLLLLLMMLLLLLLLLLLLLMMLLLMMLMMMMLLLLLLLLLLLMLLLRDLLLLLLLLLMLMMLLLLLLDLMLLMMLLMLLLMLLLLFFAAAANNDELLLLLALLLLLLLLLLFFLLMMLLLLLLLLLLLLEDNNENNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKAKARDLLLLLLLLLLLLLLLMMLLMLLLLLNEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLMLLLLLLLLLLLLADDDDDLLLLLLLLLLLLLLLLLLLLMMLLLLLMMMLLLLLLLLLLLLLLLLMMLLLLLMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLENDGNNNLLLLLLLLLLLLLLLLLLLAALLLLLLLLLLLNNENNLLLLLLLLLLLLLLLLLLLLLNNNNNENLLLLLLLLLLLLLLLLLLLLLMMMMDNEINLLLLLLLLLLLLLLLLLLLLLLLLLKMALLLLLLLMLLKLLMDLLLLLLLLLLLLFF","n":["CC_IMAGE_WORK_DIR","ERR_BAD_UNCOMPRESSED_DIGEST","auth","bundle","config","decoder","decrypt","digest","image","meta_store","pull","resource","signature","snapshots","stream","unpack","DockerAuthConfig","DockerConfigFile","RESOURCE_DESCRIPTION","auth_config","borrow","borrow","borrow_mut","borrow_mut","credential_for_reference","deserialize","deserialize","from","from","from_base64","from_base64","into","into","serialize","serialize","sign_with_key","sign_with_key","to_base64","to_base64","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","credential_from_auth_config","BUNDLE_CONFIG","BUNDLE_HOSTNAME","BUNDLE_ROOTFS","create_runtime_config","AUTH_FILE_PATH","CONFIGURATION_FILE_PATH","DEFAULT_MAX_CONCURRENT_DOWNLOAD","FscacheConfig","FuseConfig","GPG_KEY_RING","ImageConfig","NydusConfig","POLICY_FILE_PATH","Paths","SIG_STORE_CONFIG_DEFAULT_FILE","SIG_STORE_CONFIG_DIR","auth","auth_file","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default_snapshot","deserialize","deserialize","deserialize","deserialize","deserialize","driver_type","fail_over_policy","file_paths","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_base64","from_base64","from_base64","from_base64","from_base64","fscache","fscache_config","fscache_tag","fscache_threads","fuse_config","fuse_threads","get_fscache_config","get_fuse_config","get_nydus_config","id","into","into","into","into","into","is_fscache","is_fuse","localfs_dir","max_concurrent_download","nydus_config","policy_path","prefetch_files","security_validate","sigstore_config","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","validate","validate","virtual_mountpoint","vzip","vzip","vzip","vzip","vzip","work_dir","Compression","ERR_BAD_MEDIA_TYPE","Gzip","Uncompressed","Zstd","async_decompress","async_gzip_decompress","async_zstd_decompress","borrow","borrow_mut","clone","clone_into","decompress","default","deserialize","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from_base64","into","to_owned","to_string","try_from","try_from","try_into","type_id","vzip","Decryptor","async_get_plaintext_layer","borrow","borrow_mut","clone","clone_into","default","fmt","from","from_media_type","get_decrypt_key","get_plaintext_layer","into","is_encrypted","media_type","to_owned","try_from","try_into","type_id","vzip","DIGEST_SHA256_PREFIX","DIGEST_SHA512_PREFIX","DigestHasher","LayerDigestHasher","Sha256","Sha512","borrow","borrow_mut","clone","clone_into","digest_finalize","digest_finalize","digest_update","digest_update","fmt","from","into","to_owned","try_from","try_into","type_id","vzip","IMAGE_SECURITY_CONFIG_DIR","ImageClient","ImageMeta","LayerMeta","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","compressed_digest","config","decoder","default","default","default","deserialize","deserialize","digest","encrypted","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","from_base64","from_base64","id","image_config","into","into","into","layer_metas","meta_store","pull_image","reference","signed","snapshots","store_path","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uncompressed_digest","vzip","vzip","vzip","METAFILE","MetaStore","borrow","borrow_mut","clone","clone_into","default","deserialize","fmt","from","from_base64","image_db","into","layer_db","snapshot_db","to_owned","try_from","try_from","try_into","type_id","vzip","PullClient","async_pull_layers","auth","borrow","borrow_mut","client","data_dir","from","into","max_concurrent_download","new","pull_bootstrap","pull_manifest","reference","try_from","try_into","type_id","vzip","get_resource","allows_image","image","mechanism","payload","policy","Dir","Docker","Image","TransportName","borrow","borrow","borrow_mut","borrow_mut","default_with_reference","digest","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from_str","get_image_namespaces","get_image_repository_full_name","into","into","manifest_digest","reference","set_manifest_digest","to_string","transport_name","try_from","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Algorithm","Digest","InvalidFormat","InvalidLength","ParseError","Sha256","Sha384","Sha512","UnsupportedAlgorithm","algorithm","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from_str","get_str","into","into","into","is_empty","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","vzip","vzip","vzip","SignScheme","allows_image","cosign","init","simple","COSIGN_KEY_KBS","CosignParameters","allows_image","borrow","borrow_mut","default","deserialize","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","from_base64","init","into","key_data","key_path","serialize","sign_with_key","signed_identity","to_base64","try_from","try_into","type_id","vzip","Gpg","KeyType","SimpleParameters","allows_image","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deserialize","deserialize","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from_base64","from_base64","from_str","init","into","into","key_data","key_path","key_type","serialize","sign_with_key","signed_identity","to_base64","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","simple_signing","Critical","Identity","Image","Optional","SigPayload","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","creator","critical","deserialize","deserialize","deserialize","deserialize","deserialize","docker_manifest_digest","docker_reference","extra","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_base64","from_base64","from_base64","from_base64","from_base64","identity","image","into","into","into","into","into","optional","serialize","serialize","serialize","serialize","serialize","sign_with_key","sign_with_key","sign_with_key","sign_with_key","sign_with_key","timestamp","to_base64","to_base64","to_base64","to_base64","to_base64","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_name","validate_signed_docker_manifest_digest","validate_signed_docker_reference","vzip","vzip","vzip","vzip","vzip","ErrorInfo","MatchReference","Policy","PolicyTransportScopes","UnknowPolicyReqType","UnknownMatchPolicyType","UnknownScheme","borrow","borrow","borrow_mut","borrow_mut","deserialize","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from_base64","from_str","into","into","is_image_allowed","policy_requirement","ref_match","signature_schemes","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Accept","Cosign","PolicyReqType","Reject","SimpleSigning","allows_image","borrow","borrow_mut","deserialize","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","from_base64","into","serialize","sign_with_key","to_base64","try_from","try_into","try_into_sign_scheme","type_id","vzip","ExactReference","ExactRepository","MatchExact","MatchRepoDigestOrExact","MatchRepository","PolicyReqMatchType","RemapIdentity","borrow","borrow_mut","default_match_policy","deserialize","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","from_base64","into","matches_docker_reference","serialize","sign_with_key","to_base64","try_from","try_into","type_id","vzip","docker_reference","docker_repository","prefix","signed_prefix","MountPoint","Overlay","SnapshotType","Snapshotter","Unknown","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deserialize","deserialize","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from_base64","from_base64","hash","into","into","mount","mount_path","overlay","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type","type_id","type_id","unmount","vzip","vzip","work_dir","OverlayFs","borrow","borrow_mut","fmt","from","into","mount","new","try_from","try_into","type_id","unmount","vzip","stream_processing","unpack"],"q":[[0,"image_rs"],[16,"image_rs::auth"],[47,"image_rs::auth::auth_config"],[48,"image_rs::bundle"],[52,"image_rs::config"],[169,"image_rs::decoder"],[201,"image_rs::decrypt"],[221,"image_rs::digest"],[243,"image_rs::image"],[306,"image_rs::meta_store"],[327,"image_rs::pull"],[345,"image_rs::resource"],[346,"image_rs::signature"],[351,"image_rs::signature::image"],[389,"image_rs::signature::image::digest"],[456,"image_rs::signature::mechanism"],[461,"image_rs::signature::mechanism::cosign"],[488,"image_rs::signature::mechanism::simple"],[540,"image_rs::signature::payload"],[541,"image_rs::signature::payload::simple_signing"],[644,"image_rs::signature::policy"],[683,"image_rs::signature::policy::policy_requirement"],[709,"image_rs::signature::policy::ref_match"],[737,"image_rs::signature::policy::ref_match::PolicyReqMatchType"],[741,"image_rs::snapshots"],[788,"image_rs::snapshots::overlay"],[801,"image_rs::stream"],[802,"image_rs::unpack"],[803,"oci_distribution::reference"],[804,"oci_distribution::secrets"],[805,"anyhow"],[806,"core::result"],[807,"serde::de"],[808,"jwt::error"],[809,"core::convert"],[810,"core::marker"],[811,"serde::ser"],[812,"alloc::string"],[813,"jwt::algorithm"],[814,"alloc::borrow"],[815,"core::any"],[816,"std::collections::hash::map"],[817,"oci_spec::image::config"],[818,"std::path"],[819,"std::path"],[820,"core::fmt"],[821,"alloc::boxed"],[822,"core::marker"],[823,"std::io"],[824,"std::io"],[825,"alloc::vec"],[826,"core::option"],[827,"tokio::sync::mutex"],[828,"alloc::sync"],[829,"oci_distribution::manifest"],[830,"core::pin"],[831,"sigstore::cosign::payload::simple_signing"],[832,"core::hash"],[833,"core::sync::atomic"]],"d":["Environment macro for <code>image-rs</code> work dir.","","","","","","","","","","","This module helps to fetch resource using different …","","","","","","","Hard-coded ResourceDescription of <code>auth.json</code>.","Helps to get auths directly from <code>DockerAuthConfig</code>s inside …","","","","","Get a credential (RegistryAuth) for the given Reference. …","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Read credentials from the auth config, s.t. try to search …","","","","Convert an <code>application/vnd.oci.image.config.v1+json</code> object …","The reason for using the <code>/run</code> directory here is that in …","Path to the configuration file to generate …","Default max concurrent download.","Nydus daemon fs backend configuration for fusedev","Nydus daemon fs backend configuration for fusedev","Path to the gpg pubkey ring of the signature","<code>image-rs</code> configuration information.","Nydus daemon service configuration support fs driver …","Default policy file path.","","","Dir of Sigstore Config file. The reason for using the <code>/run</code> …","Use <code>auth.json</code> control","Path to the auth file","","","","","","","","","","","","","","","","","","","","","","","","","","The default snapshot for <code>image-rs</code> to use.","","","","","","Type of daemon service","FUSE server failover policy","Records different configurable paths","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Working directory for Linux fscache driver to store cache …","Fscache service configuration","Working directory for Linux fscache driver to store cache …","Number of working threads to serve fscache requests","Fuse service configuration","Number of worker threads to serve FUSE I/O requests","","","","Service instance identifier","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check whether the service type is <code>fscache</code>","Check whether the service type is <code>fuse</code>","Path to the <code>localfs</code> working directory, which also enables …","Maximum number of concurrent downloads to perform during …","Nydus services configuration","Path to <code>Policy.json</code>","Path to the prefetch configuration file","Security validation control","sigstore config file for simple signing","","","","","","","","","","","","","","","","","","","","","","Validate the configuration object.","Validate the configuration object.","Mountpoint within the FUSE/virtiofs device to mount the …","","","","","","The location for <code>image-rs</code> to store data.","Represents the layer compression algorithm type, and …","Error message for unhandled media type.","","","","Create an <code>AsyncRead</code> to decode input stream.","Create an <code>AsyncRead</code> to decode input gzip stream.","Create an <code>AsyncRead</code> to decode input zstd stream.","","","","","Decompress input data from one <code>Read</code> and output data to one …","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Image layer encryption type information and associated …","","","","","","","","Returns the argument unchanged.","Construct Decryptor from media_type.","","","Calls <code>U::from(self)</code>.","Check whether media_type is encrypted.","The layer original media type before encryption.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Image security config dir contains important information …","The<code>image-rs</code> client will support OCI image pulling, image …","The metadata info for container image.","The metadata info for container image layer.","","","","","","","","","","","The compressed digest of image layer.","The config for <code>image-rs</code> client.","Image layer compression algorithm type.","","","","","","The digest of the image.","Whether image layer is encrypted.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","The digest of the image configuration.","The image configuration.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The metadata of image layers.","The metadata database for <code>image-rs</code> client.","pull_image pulls an image with optional auth info and …","The reference string for the image","Whether image is signed.","The supported snapshots for <code>image-rs</code> client.","The image layer storage path.","","","","","","","","","","","","The uncompressed digest of image layer.","","","","","<code>image-rs</code> container metadata storage database.","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","The PullClient connects to remote OCI registry, pulls the …","async_pull_layers pulls an image layers and do ondemand …","OCI registry auth info.","","","<code>oci-distribution</code> client to talk with remote OCI registry.","OCI image layer data store dir.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Max number of concurrent downloads.","Constructs a new PullClient struct with provided image …","pull_bootstrap pulls a nydus image’s bootstrap layer.","pull_manifest pulls an image manifest and config data.","OCI image reference.","","","","","This is a public API to retrieve resources. The input …","<code>allows_image</code> will check all the <code>PolicyRequirements</code> …","","Signing schemes","Payload format for a signature","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Invalid checksum digest format","Invalid checksum digest length","","","","","Unsupported digest algorithm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","The interface of a signing scheme","Judge whether an image is allowed by this SignScheme.","Cosign verification","Do initialization jobs for this scheme. This may include …","","The name of resource to request cosign verification key …","","Judge whether an image is allowed by this SignScheme.","","","","","","","","","","","Returns the argument unchanged.","","This initialization will:","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Payload format of simple signing","A JSON object which contains data critical to correctly …","A JSON object which identifies the claimed identity of the …","A JSON object which identifies the container image this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A JSON string, in the …","A JSON string, in the …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Accept all images","Signed by Cosign","Policy Requirement Types.","Deny all images","Signed by Simple Signing","Check whether an image is allowed by a given policy …","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Return the <code>SignScheme</code> trait object if it is some signing …","","","<code>exactReference</code> match type: matches a specified reference …","<code>exactRepository</code> match type: matches a specified …","<code>matchExact</code> match type : the two references must match …","<code>matchRepoDigestOrExact</code> match type: the two references must …","<code>matchRepository</code> match type: the two references must use …","The <code>signedIdentity</code> field in simple signing. It is a JSON …","<code>remapIdentity</code> match type: except that a namespace (at …","","","Return a default match policy","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Check whether matches reference","","","","","","","","","","","","A MountPoint contains the info to represents a mount point.","","Snapshot types.","Trait to mount/umount image snapshots.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The mount destination path.","","","","","","","","","The filesystem type of mount point.","","","","","","The work dir generated by snapshot.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Create a new instance of OverlayFs.","","","","","","stream_processing will handle async uncompressed layer …","Unpack the contents of tarball to the destination path"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,5,8,0,5,8,5,8,5,8,5,8,5,8,5,8,5,8,5,8,5,8,5,8,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,24,23,24,25,26,27,23,24,25,26,27,23,24,25,26,27,23,24,25,26,27,23,24,25,26,27,23,23,24,25,26,27,25,26,23,23,24,25,26,27,23,24,25,26,27,23,24,25,26,27,27,25,27,27,25,26,25,25,23,25,23,24,25,26,27,25,25,26,23,23,24,26,23,24,23,24,25,26,27,23,23,24,25,26,27,23,24,25,26,27,23,24,25,26,27,23,25,26,23,24,25,26,27,23,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,0,0,43,43,43,43,43,43,81,43,81,43,43,43,43,43,43,43,43,43,0,0,0,0,46,44,45,46,44,45,44,45,44,45,44,46,44,46,44,45,44,45,45,44,44,44,44,44,44,44,45,46,44,45,44,45,45,45,46,44,45,45,46,46,45,45,46,44,44,45,46,44,45,46,44,45,46,44,45,44,46,44,45,0,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,0,0,0,0,0,55,55,0,0,54,55,54,55,54,0,55,55,55,55,55,55,55,54,55,55,0,0,54,55,54,54,54,55,54,54,55,55,54,55,54,55,54,55,0,0,59,59,0,58,58,58,59,57,58,59,57,58,59,57,57,57,57,58,59,57,58,58,58,58,59,59,59,59,57,57,57,57,58,58,59,59,57,58,59,57,58,58,58,59,57,57,57,58,59,57,58,58,59,57,57,58,59,57,58,59,57,57,58,59,57,0,74,0,74,0,0,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,64,0,0,63,63,64,63,64,64,64,63,63,64,63,64,63,63,63,63,64,64,64,64,63,64,64,63,64,63,64,64,63,63,64,63,63,63,63,63,63,63,64,64,63,64,64,63,64,63,64,63,64,0,0,0,0,0,0,65,66,67,68,69,65,66,67,68,69,65,66,67,68,69,65,66,67,68,69,69,65,65,66,67,68,69,67,68,69,65,66,67,68,69,65,65,66,67,68,69,65,66,67,68,69,66,66,65,66,67,68,69,65,65,66,67,68,69,65,66,67,68,69,69,65,66,67,68,69,65,66,67,68,69,65,66,67,68,69,65,66,67,68,69,65,66,67,68,69,66,65,65,65,66,67,68,69,0,73,0,0,73,73,73,73,72,73,72,72,73,73,73,73,73,73,73,73,72,72,73,73,72,72,0,0,72,73,73,73,72,73,72,73,72,73,72,75,75,0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,71,71,71,71,71,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,82,83,84,84,0,76,0,0,76,76,77,76,77,76,77,76,77,76,77,76,76,76,76,76,76,76,77,76,77,76,77,76,76,77,85,77,0,76,77,76,76,77,76,77,77,76,77,85,76,77,77,0,79,79,79,79,79,79,79,79,79,79,79,79,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,2],[[4,[3]]]],[-1,[[6,[5]]],7],[-1,[[6,[8]]],7],[-1,-1,[]],[-1,-1,[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,-1],6,14],[[8,-1],6,14],[[-1,-2],[[6,[15,9]]],[],16],[[-1,-2],[[6,[15,9]]],[],16],[-1,[[6,[[17,[2]],9]]],[]],[-1,[[6,[[17,[2]],9]]],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,[19,[15,8]]],[[4,[3]]]],0,0,0,[[20,21],[[4,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[23,23],[24,24],[25,25],[26,26],[27,27],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[],23],[[],24],[[],25],[[],26],[[],27],0,[-1,[[6,[23]]],7],[-1,[[6,[24]]],7],[-1,[[6,[25]]],7],[-1,[[6,[26]]],7],[-1,[[6,[27]]],7],0,0,0,[[23,29],30],[[24,29],30],[[25,29],30],[[26,29],30],[[27,29],30],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],0,0,0,0,0,0,[25,[[4,[27]]]],[25,[[4,[26]]]],[23,[[4,[25]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[25,31],[25,31],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,[[4,[23]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[23,31],[25,31],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[32,-1],[[34,[33]]],[33,35,36]],[-1,[[0,[33,35]]],[33,35]],[-1,[[0,[33,35]]],[33,35]],[-1,-2,[],[]],[-1,-2,[],[]],[32,32],[[-1,-2],28,[],[]],[[32,-1,-2],[[37,[28]]],38,39],[[],32],[-1,[[6,[32]]],7],[[32,32],31],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[32,29],30],[[32,29],30],[-1,-1,[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,15,[]],[2,[[4,[32]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],0,[[40,-1,41,[11,[10]]],[[4,[[0,[33]]]]],33],[-1,-2,[],[]],[-1,-2,[],[]],[40,40],[[-1,-2],28,[],[]],[[],40],[[40,29],30],[-1,-1,[]],[2,40],[[40,41,2],[[4,[[42,[10]]]]]],[[40,41,[42,[10]],2],[[4,[[42,[10]]]]]],[-1,-2,[],[]],[40,31],0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[43,43],[[-1,-2],28,[],[]],[-1,15,[]],[43,15],[[-1,[11,[10]]],28,[]],[[43,[11,[10]]],28],[[43,29],30],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[44,44],[45,45],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],0,0,0,[[],46],[[],44],[[],45],[-1,[[6,[44]]],7],[-1,[[6,[45]]],7],0,0,[[44,44],31],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[44,29],30],[[45,29],30],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[46,2,21,[47,[2]],[47,[2]]],[[4,[15]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[48,48],[[-1,-2],28,[],[]],[[],48],[-1,[[6,[48]]],7],[[48,29],30],[-1,-1,[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],0,[-1,-2,[],[]],0,0,[-1,-2,[],[]],[21,[[4,[48]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],0,[[49,[42,[41]],[11,[15]],[47,[2]],[51,[[50,[48]]]]],[[4,[[42,[44]]]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-1,[]],[-1,-2,[],[]],0,[[1,21,3,52],[[4,[49]]]],[[49,41,15,[47,[2]],[51,[[50,[48]]]]],[[4,[44]]]],[49,[[4,[[28,[53,15,15]]]]]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],[2,[[4,[[42,[10]]]]]],[[2,2,3,24],[[4,[28]]]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,54],0,[[55,55],31],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[55,29],[[6,[28,56]]]],[[55,29],30],[-1,-1,[]],[-1,-1,[]],[2,[[6,[55]]]],[1,[[42,[15]]]],[1,15],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[54,2],[[4,[28]]]],[-1,15,[]],[54,15],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[2,[[6,[55]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[57,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[57,57],[[-1,-2],28,[],[]],[[],57],[[58,58],31],[[59,59],31],[[57,57],31],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[58,29],[[6,[28,56]]]],[[58,29],30],[[59,29],30],[[59,29],30],[[57,29],30],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[2,[[6,[58]]]],[[58,2],[[47,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[57,31],[-1,-2,[],[]],[-1,15,[]],[-1,15,[]],[57,15],[-1,[[6,[-2]]],[],[]],[2,[[6,[58]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[2,[[6,[57]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[57,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[-1,54,3],[[61,[[34,[60]]]]],[]],0,[[-1,24],[[61,[[34,[60]]]]],[]],0,0,0,[[62,54,3],[[61,[[34,[60]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[],62],[-1,[[6,[62]]],7],[[62,62],31],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[62,29],30],[-1,-1,[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],[[62,24],[[61,[[34,[60]]]]]],[-1,-2,[],[]],0,0,[[62,-1],6,14],[[-1,-2],[[6,[15,9]]],[],16],0,[-1,[[6,[[17,[2]],9]]],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],0,0,0,[[63,54,3],[[61,[[34,[60]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[64,64],[[-1,-2],28,[],[]],[[],63],[-1,[[6,[63]]],7],[-1,[[6,[64]]],7],[[63,63],31],[[64,64],31],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[63,29],30],[[64,29],30],[[64,29],[[6,[28,56]]]],[-1,-1,[]],[-1,-1,[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],[2,[[6,[64]]]],[[63,24],[[61,[[34,[60]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[63,-1],6,14],[[-1,-2],[[6,[15,9]]],[],16],0,[-1,[[6,[[17,[2]],9]]],[]],[-1,-2,[],[]],[-1,15,[]],[-1,[[6,[-2]]],[],[]],[2,[[6,[64]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[65,65],[66,66],[67,67],[68,68],[69,69],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],0,0,[-1,[[6,[65]]],7],[-1,[[6,[66]]],7],[-1,[[6,[67]]],7],[-1,[[6,[68]]],7],[-1,[[6,[69]]],7],0,0,0,[[65,29],30],[[66,29],30],[[67,29],30],[[68,29],30],[[69,29],30],[70,65],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[65,-1],6,14],[[66,-1],6,14],[[67,-1],6,14],[[68,-1],6,14],[[69,-1],6,14],[[-1,-2],[[6,[15,9]]],[],16],[[-1,-2],[[6,[15,9]]],[],16],[[-1,-2],[[6,[15,9]]],[],16],[[-1,-2],[[6,[15,9]]],[],16],[[-1,-2],[[6,[15,9]]],[],16],0,[-1,[[6,[[17,[2]],9]]],[]],[-1,[[6,[[17,[2]],9]]],[]],[-1,[[6,[[17,[2]],9]]],[]],[-1,[[6,[[17,[2]],9]]],[]],[-1,[[6,[[17,[2]],9]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],0,[[65,2],[[4,[28]]]],[[65,1,71],[[4,[28]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[72]]],7],[[73,73],31],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[73,29],[[6,[28,56]]]],[[73,29],30],[-1,-1,[]],[-1,-1,[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],[2,[[6,[73]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[72,54,3],[[4,[28]]]],0,0,[[72,54],[[42,[74]]]],[-1,15,[]],[2,[[6,[73]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[[75,54,3],[[4,[28]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[75]]],7],[[75,75],31],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[75,29],30],[-1,-1,[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],[-1,-2,[],[]],[[75,-1],6,14],[[-1,-2],[[6,[15,9]]],[],16],[-1,[[6,[[17,[2]],9]]],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[75,[[47,[74]]]],[-1,18,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],71],[-1,[[6,[71]]],7],[[71,71],31],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[71,29],30],[-1,-1,[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],[-1,-2,[],[]],[[71,1,2],[[4,[28]]]],[[71,-1],6,14],[[-1,-2],[[6,[15,9]]],[],16],[-1,[[6,[[17,[2]],9]]],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[76,76],[77,77],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[-1,[[6,[76]]],7],[-1,[[6,[77]]],7],[[76,76],31],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[76,29],30],[[76,29],30],[[77,29],30],[-1,-1,[]],[-1,-1,[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],[-1,[[6,[-2,9]]],[[12,[[11,[10]]]],13],[]],[[76,-1],28,78],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[11,[2]],21],[[4,[77]]],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,15,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],0,[-1,18,[]],[-1,18,[]],[[-1,77],[[4,[28]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[79,29],30],[-1,-1,[]],[-1,-2,[],[]],[[79,[11,[2]],21],[[4,[77]]]],[[22,80],79],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,18,[]],[[79,77],[[4,[28]]]],[-1,-2,[],[]],[[-1,2,21],[[4,[15]]],[33,35]],[[-1,21],[[4,[28]]],38]],"c":[],"p":[[3,"Reference",803],[15,"str"],[4,"RegistryAuth",804],[6,"Result",805],[3,"DockerConfigFile",16],[4,"Result",806],[8,"Deserializer",807],[3,"DockerAuthConfig",16],[4,"Error",808],[15,"u8"],[15,"slice"],[8,"AsRef",809],[8,"Sized",810],[8,"Serializer",811],[3,"String",812],[8,"SigningAlgorithm",813],[4,"Cow",814],[3,"TypeId",815],[3,"HashMap",816],[3,"ImageConfiguration",817],[3,"Path",818],[3,"PathBuf",818],[3,"ImageConfig",52],[3,"Paths",52],[3,"NydusConfig",52],[3,"FuseConfig",52],[3,"FscacheConfig",52],[15,"tuple"],[3,"Formatter",819],[6,"Result",819],[15,"bool"],[4,"Compression",169],[8,"AsyncRead",820],[3,"Box",821],[8,"Unpin",810],[8,"Send",810],[6,"Result",822],[8,"Read",823],[8,"Write",823],[3,"Decryptor",201],[3,"OciDescriptor",824],[3,"Vec",825],[4,"LayerDigestHasher",221],[3,"LayerMeta",243],[3,"ImageMeta",243],[3,"ImageClient",243],[4,"Option",826],[3,"MetaStore",306],[3,"PullClient",327],[3,"Mutex",827],[3,"Arc",828],[15,"usize"],[3,"OciImageManifest",824],[3,"Image",351],[4,"TransportName",351],[3,"Error",819],[3,"Digest",389],[4,"Algorithm",389],[4,"ParseError",389],[8,"Future",829],[3,"Pin",830],[3,"CosignParameters",461],[3,"SimpleParameters",488],[4,"KeyType",488],[3,"SigPayload",541],[3,"Critical",541],[3,"Image",541],[3,"Identity",541],[3,"Optional",541],[3,"SimpleSigning",831],[4,"PolicyReqMatchType",709],[3,"Policy",644],[4,"ErrorInfo",644],[8,"SignScheme",456],[4,"PolicyReqType",683],[4,"SnapshotType",741],[3,"MountPoint",741],[8,"Hasher",832],[3,"OverlayFs",788],[3,"AtomicUsize",833],[8,"DigestHasher",221],[13,"ExactReference",737],[13,"ExactRepository",737],[13,"RemapIdentity",737],[8,"Snapshotter",741]]},\
"kbc":{"doc":"","t":"CDGIDDALLLLLLKKLLLLLLLLLLLMLLALALLLLLLLLLDLLLLLMMLLLLMMNNNNEDNLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNENLLLLLLLLLLLLLLL","n":["AnnotationPacket","KbcCheckInfo","KbcInstance","KbcInterface","KbcModuleList","ResourceDescription","annotation_packet","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","decrypt_payload","default","deserialize","fmt","from","from","from","get_func","get_resource","into","into","into","kbs_info","names","new","sample_kbc","serialize","tests","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","AnnotationPacket","borrow","borrow_mut","deserialize","from","into","iv","kid","serialize","try_from","try_into","type_id","wrap_type","wrapped_data","CosignVerificationKey","Credential","GPGPublicKey","Policy","ResourceType","SampleKbc","SigstoreConfig","as_ref","borrow","borrow","borrow_mut","borrow_mut","check","decrypt_payload","eq","equivalent","fmt","fmt","from","from","from_str","get_resource","into","into","new","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id","ClientId","CosignVerificationKey","Credential","GPGPublicKey","Policy","ResourcePath","SigstoreConfig","as_ref","borrow","borrow_mut","eq","equivalent","fmt","fmt","from","from_str","into","to_string","try_from","try_from","try_into","type_id"],"q":[[0,"kbc"],[41,"kbc::annotation_packet"],[55,"kbc::sample_kbc"],[88,"kbc::tests"],[110,"anyhow"],[111,"core::future::future"],[112,"alloc::boxed"],[113,"core::pin"],[114,"core::result"],[115,"serde::de"],[116,"core::fmt"],[117,"core::fmt"],[118,"resource_uri"],[119,"alloc::string"],[120,"alloc::vec"],[121,"serde::ser"],[122,"core::any"],[123,"core::fmt"]],"d":["","Status information about KBC modules.","A container type for KbcInterface trait objects.","","A container type to host all registered KBC modules.","Descriptor for resources managed by attestation agent.","","","","","","","","Get information about KBC plugin.","Decrypt module specific encrypted payload into plaintext …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get initialization function for a KBC module.","Get resources managed by the attestation agent in …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create a new KbcModuleList and register all known KBC …","","","","","","","","","","","","","<code>AnnotationPacket</code> is what a encrypted image layer’s …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","public key file used to verify signature of images in …","container registry auth file, used to provide auth when …","gpg public key used to verify signature of images in …","image security policy, used to define whether a specific …","","","used to configure the storage path of public keys used by …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","client ID used in online sev kbc","public key file used to verify signature of images in …","container registry auth file, used to provide auth when …","gpg public key used to verify signature of images in …","image security policy, used to define whether a specific …","Type of resources supported by the attestation agent. The …","used to configure the storage path of public keys used by …","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,0,0,0,0,0,1,7,8,1,7,8,26,26,7,8,8,1,7,8,7,26,1,7,8,1,7,7,0,8,0,1,7,8,1,7,8,1,7,8,0,3,3,3,3,3,3,3,3,3,3,3,3,3,20,20,20,20,0,0,20,20,21,20,21,20,21,21,20,20,20,20,21,20,20,21,21,20,21,20,21,20,20,21,20,21,20,25,25,25,25,25,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[2,[1]]],[]],[[-1,3],[[6,[[5,[4]]]]],[]],[[],7],[-1,[[9,[8]]],10],[[8,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[7,13],[[2,[[5,[14]]]]]],[[-1,15],[[6,[[5,[4]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[7,[[17,[16]]]],[[],7],0,[[8,-1],9,18],0,[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[3]]],10],[-1,-1,[]],[-1,-2,[],[]],0,0,[[3,-1],9,18],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,19,[]],0,0,0,0,0,0,0,0,0,[20,13],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,[[2,[1]]]],[[21,3],[[6,[[5,[4]]]]]],[[20,20],22],[[-1,-2],22,[],[]],[[20,11],[[9,[23,24]]]],[[20,11],12],[-1,-1,[]],[-1,-1,[]],[13,[[9,[20]]]],[[21,15],[[6,[[5,[4]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[16,21],[-1,16,[]],[-1,[[9,[-2]]],[],[]],[13,[[9,[20]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],0,0,0,0,0,0,0,[25,13],[-1,-2,[],[]],[-1,-2,[],[]],[[25,25],22],[[-1,-2],22,[],[]],[[25,11],12],[[25,11],[[9,[23,24]]]],[-1,-1,[]],[13,[[9,[25]]]],[-1,-2,[],[]],[-1,16,[]],[13,[[9,[25]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,19,[]]],"c":[],"p":[[3,"KbcCheckInfo",0],[6,"Result",110],[3,"AnnotationPacket",41],[8,"Future",111],[3,"Box",112],[3,"Pin",113],[3,"KbcModuleList",0],[3,"ResourceDescription",0],[4,"Result",114],[8,"Deserializer",115],[3,"Formatter",116],[6,"Result",116],[15,"str"],[8,"Fn",117],[3,"ResourceUri",118],[3,"String",119],[3,"Vec",120],[8,"Serializer",121],[3,"TypeId",122],[4,"ResourceType",55],[3,"SampleKbc",55],[15,"bool"],[15,"tuple"],[3,"Error",116],[4,"ResourcePath",88],[8,"KbcInterface",0]]},\
"kbs_protocol":{"doc":"The Client of KBS RCAR Protocol.","t":"CCCCCAAAAAAAIDLLLLLLLLLLLLKLLMLMLLMLLLLLMLLLDLLLLLLLLLLLLLLLLLLLRRRDLLLLLLLLLLLLAALLLLNNNENNNNNNNNNNNGNLLLLLLLLLLLLLLLLIKKAADLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLDIALLLLLMLLLLLLKLLLALLLLLDLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLL","n":["Error","KbsClientBuilder","Result","TeeKeyPair","Token","api","builder","client","error","evidence_provider","keypair","token_provider","KbsClientCapabilities","ResourceUri","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","fmt","free","from","get_resource","init","into","kbs_addr","new","repository","resource_path","serialize","tag","to_owned","try_from","try_from","try_from","try_into","type","type_id","vzip","whole_uri","KbsClientBuilder","add_kbs_cert","borrow","borrow_mut","build","deref","deref_mut","drop","free","from","init","into","set_tee_key","set_token","try_from","try_into","type_id","vzip","with_evidence_provider","with_token_provider","KBS_GET_RESOURCE_MAX_ATTEMPT","KBS_PREFIX","KBS_PROTOCOL_VERSION","KbsClient","borrow","borrow_mut","deref","deref_mut","drop","free","from","get_resource","get_resource","get_token","init","into","rcar_client","token_client","try_from","try_into","type_id","vzip","AATokenProvider","DecryptResponseFailed","Err","Error","GenerateKeyPairFailed","GetEvidence","GetTeeTypeFailed","GetTokenFailed","HttpError","KbsInternalError","KbsResponseDeserializationFailed","NativeEvidenceProvider","Ok","RcarHandshake","ResourceNotFound","Result","UnAuthorized","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","free","from","init","into","to_string","try_from","try_into","type_id","vzip","EvidenceProvider","get_evidence","get_tee_type","mock","native","MockedEvidenceProvider","borrow","borrow_mut","default","deref","deref_mut","drop","free","from","get_evidence","get_tee_type","init","into","try_from","try_into","type_id","vzip","NativeEvidenceProvider","borrow","borrow_mut","deref","deref_mut","drop","free","from","get_evidence","get_tee_type","init","into","new","try_from","try_into","type_id","vzip","TeeKeyPair","borrow","borrow_mut","clone","clone_into","decrypt","decrypt_response","deref","deref_mut","drop","export_pubkey","fmt","free","from","from_pkcs1_pem","init","into","new","to_owned","to_pkcs1_pem","try_from","try_into","type_id","vzip","Token","TokenProvider","aa","borrow","borrow_mut","check_valid","clone","clone_into","content","deref","deref_mut","drop","fmt","free","from","get_token","init","into","new","test","to_owned","try_from","try_into","type_id","vzip","AATokenProvider","borrow","borrow_mut","deref","deref_mut","drop","free","from","get_token","init","into","new","try_from","try_into","type_id","vzip","TestTokenProvider","borrow","borrow_mut","default","deref","deref_mut","drop","free","from","get_token","init","into","try_from","try_into","type_id","vzip"],"q":[[0,"kbs_protocol"],[12,"kbs_protocol::api"],[44,"kbs_protocol::builder"],[64,"kbs_protocol::client"],[86,"kbs_protocol::error"],[119,"kbs_protocol::evidence_provider"],[124,"kbs_protocol::evidence_provider::mock"],[141,"kbs_protocol::evidence_provider::native"],[158,"kbs_protocol::keypair"],[182,"kbs_protocol::token_provider"],[207,"kbs_protocol::token_provider::aa"],[223,"kbs_protocol::token_provider::test"],[239,"core::result"],[240,"serde::de"],[241,"core::fmt"],[242,"core::fmt"],[243,"core::future::future"],[244,"alloc::boxed"],[245,"core::pin"],[246,"anyhow"],[247,"alloc::string"],[248,"serde::ser"],[249,"url"],[250,"core::any"],[251,"anyhow"],[252,"crypto::asymmetric::rsa"],[253,"kbs_types"],[254,"kbs_types"]],"d":["","","","","","","","KBS Clients","","","","","","Resource Id document …","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","Only return the resource path. This function is used …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","This Client is used to connect to the remote KBS.","","","","","","","Returns the argument unchanged.","","","Get a <code>TeeKeyPair</code> and a <code>Token</code> that certifies the <code>TeeKeyPair</code>.","","Calls <code>U::from(self)</code>.","","","","","","","","","Contains the error value","","","","","","","","","","Contains the success value","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Get evidence with as runtime data (report data, challege)","Get the underlying Tee type","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Export TEE public key as specific structure.","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","This is a token provider which connects the …","","","","","","","","","","","","Returns the argument unchanged.","Get token provisioned by Kbs and the tee pub key","","Calls <code>U::from(self)</code>.","","This is a mocked token provider which only for tests","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,39,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,0,0,20,20,20,20,20,20,20,20,20,20,20,20,0,0,20,20,20,20,27,27,26,0,27,27,27,27,27,27,27,27,26,27,27,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,22,22,0,0,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,0,0,24,24,24,24,24,24,24,24,24,24,24,24,23,24,24,24,0,24,24,24,24,24,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[3,-1,[]],[3,-1,[]],[-1,[[4,[1]]],5],[3,2],[[1,1],6],[[1,7],[[4,[2,8]]]],[[[9,[-1]]],2,[]],[-1,-1,[]],[[-1,1],[[12,[[11,[10]]]]],[]],[[],3],[-1,-2,[],[]],0,[[13,13],[[4,[1,14]]]],0,[1,15],[[1,-1],4,16],0,[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[13,[[4,[1]]]],[17,[[4,[1]]]],[-1,[[4,[-2]]],[],[]],0,[-1,18,[]],[-1,-2,[],[]],[1,15],0,[[[19,[-1]],13],[[19,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[19,[-1]]],[[21,[[20,[-1]]]]],[]],[3,-1,[]],[3,-1,[]],[3,2],[[[9,[-1]]],2,[]],[-1,-1,[]],[[],3],[-1,-2,[],[]],[[[19,[-1]],13],[[19,[-1]]],[]],[[[19,[-1]],13],[[19,[-1]]],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],[[[11,[22]],13],[[19,[[11,[22]]]]]],[[[11,[23]],13],[[19,[[11,[23]]]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[3,-1,[]],[3,-1,[]],[3,2],[[[9,[-1]]],2,[]],[-1,-1,[]],[[[20,[[11,[23]]]],1],[[12,[[11,[10]]]]]],[[[20,[[11,[22]]]],1],[[12,[[11,[10]]]]]],[[[20,[[11,[22]]]]],[[26,[[2,[24,25]]]]]],[[],3],[-1,-2,[],[]],0,0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[3,-1,[]],[3,-1,[]],[3,2],[[27,7],28],[[27,7],28],[[[9,[-1]]],2,[]],[-1,-1,[]],[[],3],[-1,-2,[],[]],[-1,15,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],0,[[-1,[30,[29]]],[[12,[[11,[10]]]]],[]],[-1,[[12,[[11,[10]]]]],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],31],[3,-1,[]],[3,-1,[]],[3,2],[[[9,[-1]]],2,[]],[-1,-1,[]],[[31,[30,[29]]],[[12,[[11,[10]]]]]],[31,[[12,[[11,[10]]]]]],[[],3],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[3,-1,[]],[3,-1,[]],[3,2],[[[9,[-1]]],2,[]],[-1,-1,[]],[[32,[30,[29]]],[[12,[[11,[10]]]]]],[32,[[12,[[11,[10]]]]]],[[],3],[-1,-2,[],[]],[[],[[26,[32]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[25,25],[[-1,-2],2,[],[]],[[25,33,[30,[29]]],[[21,[[30,[29]]]]]],[[25,34],[[21,[[30,[29]]]]]],[3,-1,[]],[3,-1,[]],[3,2],[25,[[21,[35]]]],[[25,7],28],[[[9,[-1]]],2,[]],[-1,-1,[]],[13,[[21,[25]]]],[[],3],[-1,-2,[],[]],[[],[[21,[25]]]],[-1,-2,[],[]],[25,[[21,[[36,[15]]]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[24,[[21,[2]]]],[24,24],[[-1,-2],2,[],[]],0,[3,-1,[]],[3,-1,[]],[3,2],[[24,7],28],[[[9,[-1]]],2,[]],[-1,-1,[]],[-1,[[12,[[11,[10]]]]],[]],[[],3],[-1,-2,[],[]],[15,[[21,[24]]]],0,[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[3,-1,[]],[3,-1,[]],[3,2],[[[9,[-1]]],2,[]],[-1,-1,[]],[37,[[12,[[11,[10]]]]]],[[],3],[-1,-2,[],[]],[[],[[26,[37]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],38],[3,-1,[]],[3,-1,[]],[3,2],[[[9,[-1]]],2,[]],[-1,-1,[]],[38,[[12,[[11,[10]]]]]],[[],3],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]]],"c":[],"p":[[3,"ResourceUri",12],[15,"tuple"],[15,"usize"],[4,"Result",239],[8,"Deserializer",240],[15,"bool"],[3,"Formatter",241],[3,"Error",241],[3,"NonNull",242],[8,"Future",243],[3,"Box",244],[3,"Pin",245],[15,"str"],[3,"Error",246],[3,"String",247],[8,"Serializer",248],[3,"Url",249],[3,"TypeId",250],[3,"KbsClientBuilder",44],[3,"KbsClient",64],[6,"Result",246],[8,"EvidenceProvider",119],[8,"TokenProvider",182],[3,"Token",182],[3,"TeeKeyPair",158],[6,"Result",86],[4,"Error",86],[6,"Result",241],[15,"u8"],[3,"Vec",251],[3,"MockedEvidenceProvider",124],[3,"NativeEvidenceProvider",141],[4,"PaddingMode",252],[3,"Response",253],[3,"TeePubKey",253],[3,"Zeroizing",254],[3,"AATokenProvider",207],[3,"TestTokenProvider",223],[8,"KbsClientCapabilities",12]]},\
"kms":{"doc":"","t":"AACCAGIIIGIKKKKNNENNGNLLLLLLLLLLLLLLLLLNENEALLLLLLLLLLLLLLLLLLLLLLLLAFFLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLIDDLLLLLLLLLLLLLLLLLLLLKLLLLLLLMLLMLLMLLLLLLLMLLLLL","n":["api","error","new_decryptor","new_getter","plugins","Annotations","Decrypter","Encrypter","Getter","ProviderSettings","Setter","decrypt","encrypt","get_secret","set_secret","AliyunKmsError","Err","Error","KbsClientError","Ok","Result","UnsupportedProvider","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","free","from","init","into","into_request","to_string","try_from","try_into","type_id","vzip","Aliyun","DecryptorProvider","Kbs","VaultProvider","aliyun","as_ref","as_ref","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","free","free","from","from","from_str","from_str","init","init","into","into","into_request","into_request","kbs","new_decryptor","new_getter","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","AliyunKmsClient","borrow","borrow_mut","decrypt","deref","deref_mut","drop","encrypt","export_provider_settings","free","from","from_provider_settings","init","into","into_request","new","try_from","try_into","type_id","vzip","Kbc","KbcClient","ResourceUri","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","fmt","free","free","from","from","from_ref","get_resource","get_secret","init","init","into","into","into_request","into_request","kbs_addr","new","new","repository","resource_path","serialize","tag","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","type","type_id","type_id","vzip","vzip","whole_uri"],"q":[[0,"kms"],[5,"kms::api"],[15,"kms::error"],[39,"kms::plugins"],[81,"kms::plugins::aliyun"],[101,"kms::plugins::kbs"],[152,"core::future::future"],[153,"alloc::boxed"],[154,"core::pin"],[155,"alloc::vec"],[156,"alloc::string"],[157,"core::fmt"],[158,"core::fmt"],[159,"tonic::request"],[160,"core::result"],[161,"core::any"],[162,"serde::de"],[163,"core::fmt"],[164,"serde::ser"],[165,"url"]],"d":["Api definitions for KMS/Vault drivers","","","","","Annotations is extra information of this …","","","","ProviderSettings are extra information to create a client","","Use the key of <code>key_id</code> to decrypt the <code>ciphertext</code> slice …","Use the key of <code>key_id</code> to encrypt the <code>data</code> slice inside …","Get secret. Different secret manager will use different …","Set secret. The <code>content</code> will be inserted with the key <code>name</code>.","","Contains the error value","","","Contains the success value","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","This is a Aliyun KMS implementation.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Abstraction for KBCs as a KMS plugin.","Create a new <code>Decrypter</code> by given provider name and …","Create a new <code>Getter</code> by given provider name and …","","","","","","","","","","","","","","","","","","","Export the <code>ProviderSettings</code> of the current client. This …","","Returns the argument unchanged.","This new function is used by a in-pod client. The …","","Calls <code>U::from(self)</code>.","","","","","","","","A fake KbcClient to carry the <code>Getter</code> semantics. The real …","Resource Id document …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Only return the resource path. This function is used …","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,22,34,24,35,12,23,0,12,23,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,19,0,20,0,0,19,20,19,20,19,20,19,20,19,20,19,20,19,20,19,20,19,20,19,20,19,20,19,20,0,0,0,19,19,20,20,19,20,19,20,19,20,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,0,0,26,30,26,30,26,26,26,30,26,30,26,26,30,26,26,26,30,26,30,26,36,30,26,30,26,30,26,30,26,26,30,26,26,26,26,26,26,26,26,30,26,30,26,26,30,26,30,26],"f":[0,0,0,0,0,0,0,0,0,0,0,[[-1,[2,[1]],3,4],[[7,[[6,[5]]]]],[]],[[-1,[2,[1]],3],[[7,[[6,[5]]]]],[]],[[-1,3,4],[[7,[[6,[5]]]]],[]],[[-1,[8,[1]],9],[[7,[[6,[5]]]]],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[10,-1,[]],[10,-1,[]],[10,11],[[12,13],14],[[12,13],14],[[[15,[-1]]],11,[]],[-1,-1,[]],[[],10],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,9,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],0,0,0,0,0,[19,3],[20,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,11],[10,11],[[[15,[-1]]],11,[]],[[[15,[-1]]],11,[]],[-1,-1,[]],[-1,-1,[]],[3,[[17,[19]]]],[3,[[17,[20]]]],[[],10],[[],10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],0,[[3,21],[[23,[[6,[22]]]]]],[[3,21],[[23,[[6,[24]]]]]],[-1,[[17,[-2]]],[],[]],[3,[[17,[19]]]],[3,[[17,[20]]]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[25,[2,[1]],3,4],[[7,[[6,[5]]]]]],[10,-1,[]],[10,-1,[]],[10,11],[[25,[2,[1]],3],[[7,[[6,[5]]]]]],[25,[[23,[21]]]],[[[15,[-1]]],11,[]],[-1,-1,[]],[21,[[23,[25]]]],[[],10],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[[3,3,3,3],[[23,[25]]]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[26,26],[[-1,-2],11,[],[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[-1,[[17,[26]]],27],[10,11],[10,11],[[26,26],28],[[26,13],[[17,[11,29]]]],[[[15,[-1]]],11,[]],[[[15,[-1]]],11,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,26],[[7,[[6,[5]]]]],[]],[[30,3,4],[[7,[[6,[5]]]]]],[[],10],[[],10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],0,[[3,3],[[17,[26,31]]]],[[],[[23,[30]]]],0,[26,9],[[26,-1],17,32],0,[-1,-2,[],[]],[33,[[17,[26]]]],[-1,[[17,[-2]]],[],[]],[3,[[17,[26]]]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],0,[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],[26,9]],"c":[],"p":[[15,"u8"],[15,"slice"],[15,"str"],[6,"Annotations",5],[8,"Future",152],[3,"Box",153],[3,"Pin",154],[3,"Vec",155],[3,"String",156],[15,"usize"],[15,"tuple"],[4,"Error",15],[3,"Formatter",157],[6,"Result",157],[3,"NonNull",158],[3,"Request",159],[4,"Result",160],[3,"TypeId",161],[4,"DecryptorProvider",39],[4,"VaultProvider",39],[6,"ProviderSettings",5],[8,"Decrypter",5],[6,"Result",15],[8,"Getter",5],[3,"AliyunKmsClient",81],[3,"ResourceUri",101],[8,"Deserializer",162],[15,"bool"],[3,"Error",157],[3,"KbcClient",101],[3,"Error",163],[8,"Serializer",164],[3,"Url",165],[8,"Encrypter",5],[8,"Setter",5],[8,"Kbc",101]]},\
"ocicrypt_rs":{"doc":"","t":"DALLALALFFALLAALLLALRNIIEDGDDLLLLLLLLMMMLLLLLLKLLLLLLLMKLKLLLLLLLLLLLKLMLLLLLLLLLLMMLLLLMLLLLLLLLLLLLLLLLLLLDDDDDRDMLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLDFLLLLFFLFLLLLLLLLLLLFFIKALALKLKKDLLLLLLLLLLLLLLLDLMLLLLLLLLMMLLLLLLRRRRIKLAAADDLLLLLLLLLLLLLLLLLLLLLLLLLLMMAALLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLIDLLLLLLLLLLLLLLLLLLLLLLKLLKDLLLLLLLLLLL","n":["KEY_WRAPPERS","blockcipher","borrow","borrow_mut","config","deref","encryption","from","get_key_wrapper","get_wrapped_keys_map","helpers","into","into_request","keywrap","spec","try_from","try_into","type_id","utils","vzip","AES256CTR","Aes256Ctr","EncryptionFinalizer","LayerBlockCipher","LayerBlockCipherHandler","LayerBlockCipherOptions","LayerCipherType","PrivateLayerBlockCipherOptions","PublicLayerBlockCipherOptions","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cipher_options","cipher_options","cipher_type","clone","clone","clone","clone_into","clone_into","clone_into","decrypt","decrypt","default","default","default","deserialize","deserialize","deserialize","digest","encrypt","encrypt","finalized_lbco","finalized_lbco","fmt","fmt","fmt","from","from","from","from","from_ref","from_ref","from_ref","generate_key","get_opt","hmac","into","into","into","into","into_request","into_request","into_request","into_request","new","poll_read","private","public","read","serialize","serialize","serialize","symmetric_key","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Command","CryptoConfig","DecryptConfig","EncryptConfig","KeyProviderAttrs","OCICRYPT_ENVVARNAME","OcicryptConfig","args","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmd","decrypt_config","decrypt_config","decrypt_with_gpg","decrypt_with_key_provider","decrypt_with_pkcs11","decrypt_with_priv_keys","decrypt_with_x509s","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","encrypt_config","encrypt_with_gpg","encrypt_with_jwe","encrypt_with_key_provider","encrypt_with_pkcs11","encrypt_with_pkcs7","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_env","from_ref","from_ref","from_ref","from_ref","from_ref","grpc","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","key_providers","native","param","param","path","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","ttrpc","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","EncLayerFinalizer","async_decrypt_layer","borrow","borrow_mut","clone","clone_into","decrypt_layer","decrypt_layer_key_opts_data","default","encrypt_layer","finalize_annotations","fmt","from","from_ref","into","into_request","to_owned","try_from","try_into","type_id","vzip","create_decrypt_config","create_encrypt_config","KeyWrapper","annotation_id","jwe","keyids_from_packet","keyprovider","private_keys","probe","recipients","unwrap_keys","wrap_keys","JweKeyWrapper","annotation_id","borrow","borrow_mut","fmt","from","into","into_request","private_keys","probe","try_from","try_into","type_id","unwrap_keys","vzip","wrap_keys","KeyProviderKeyWrapper","annotation_id","attrs","borrow","borrow_mut","fmt","from","into","into_request","new","probe","provider","runner","try_from","try_into","type_id","unwrap_keys","vzip","wrap_keys","MEDIA_TYPE_LAYER_ENC","MEDIA_TYPE_LAYER_GZIP_ENC","MEDIA_TYPE_LAYER_NON_DISTRIBUTABLE_ENC","MEDIA_TYPE_LAYER_NON_DISTRIBUTABLE_GZIP_ENC","CommandExecuter","exec","fmt","grpc","runner","keyprovider","KeyProviderKeyWrapProtocolInput","KeyProviderKeyWrapProtocolOutput","borrow","borrow","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","default","default","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","from_ref","from_ref","into","into","into_request","into_request","key_provider_key_wrap_protocol_input","key_provider_key_wrap_protocol_output","key_provider_service_client","key_provider_service_server","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","KeyProviderServiceClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","fmt","from","from_ref","into","into_request","new","send_compressed","to_owned","try_from","try_into","type_id","un_wrap_key","vzip","with_interceptor","with_origin","wrap_key","KeyProviderService","KeyProviderServiceServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","fmt","from","from_arc","from_ref","into","into_make_service","into_request","new","poll_ready","poll_ready","send_compressed","to_owned","try_from","try_into","type_id","un_wrap_key","vzip","with_interceptor","wrap_key","Runner","borrow","borrow_mut","exec","fmt","from","into","into_request","try_from","try_into","type_id","vzip"],"q":[[0,"ocicrypt_rs"],[20,"ocicrypt_rs::blockcipher"],[108,"ocicrypt_rs::config"],[228,"ocicrypt_rs::encryption"],[249,"ocicrypt_rs::helpers"],[251,"ocicrypt_rs::keywrap"],[261,"ocicrypt_rs::keywrap::jwe"],[277,"ocicrypt_rs::keywrap::keyprovider"],[296,"ocicrypt_rs::spec"],[300,"ocicrypt_rs::utils"],[305,"ocicrypt_rs::utils::grpc"],[306,"ocicrypt_rs::utils::grpc::keyprovider"],[348,"ocicrypt_rs::utils::grpc::keyprovider::key_provider_service_client"],[371,"ocicrypt_rs::utils::grpc::keyprovider::key_provider_service_server"],[399,"ocicrypt_rs::utils::runner"],[411,"alloc::string"],[412,"alloc::boxed"],[413,"std::collections::hash::map"],[414,"anyhow"],[415,"tonic::request"],[416,"core::result"],[417,"core::any"],[418,"serde::de"],[419,"core::fmt"],[420,"core::fmt"],[421,"core::option"],[422,"core::pin"],[423,"core::task::wake"],[424,"tokio::io::read_buf"],[425,"std::io::error"],[426,"core::task::poll"],[427,"tokio::io::async_read"],[428,"std::io"],[429,"serde::ser"],[430,"core::marker"],[431,"tonic::codec::compression"],[432,"tonic::body"],[433,"tonic::client::service"],[434,"core::clone"],[435,"tonic::transport::channel"],[436,"tonic::transport::error"],[437,"tonic::transport::channel::endpoint"],[438,"core::convert"],[439,"core::fmt"],[440,"tonic::status"],[441,"tonic::request"],[442,"http::request"],[443,"tower_service"],[444,"tonic::service::interceptor"],[445,"http_body"],[446,"alloc::sync"],[447,"axum::routing::into_make_service"],[448,"core::future::future"]],"d":["","","","","","","","Returns the argument unchanged.","get_key_wrapper looks up the encryptor interface given an …","get_wrapped_keys_map returns a option contains map of …","","Calls <code>U::from(self)</code>.","","","","","","","","","The default cipher algorithm for image layer …","AES_256_CTR_HMAC_SHA256","Trait to finalize the encryption operation.","Trait to setup the encryption/decryption context.","Handler for image layer encryption/decryption.","The public and private configuration information required …","Type of the cipher algorithm used to encrypt/decrypt image …","The information required to encrypt/decrypt an image layer …","The information required to encrypt/decrypt an image layer …","","","","","","","","","The cipher metadata used to configure the …","The cipher metadata used to configure the …","The cipher algorithm used to encrypt/decrypt the image …","","","","","","","Setup the context for decryption.","Setup the context for image layer decryption.","","","","","","","The digest of the original data.","Setup the context for encryption.","Setup the context for image layer encryption.","Update the <code>LayerBlockCipherOptions</code> object after finishing …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Create a symmetric key for encryption.","Get an option from the public or private configuration, …","The hashed message authentication code used to verify the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Create a <code>LayerBlockCipherHandler</code> object with default aes …","","The private configuration information for image layer …","The public configuration information for image layer …","","","","","The symmetric key used for encryption/decryption.","","","","","","","","","","","","","","","","","","","","Command describes the structure of command, it consist of …","CryptoConfig is a common wrapper for EncryptConfig and …","DecryptConfig wraps the Parameters map that holds the …","EncryptConfig is the container image PGP encryption …","KeyProviderAttrs describes the structure of key provider, …","OCICRYPT_ENVVARNAME is the environment name for ocicrypt …","OcicryptConfig represents the format of an …","","","","","","","","","","","","","","","","","","","","","","","","","Allow for adding wrapped keys to an encrypted layer","","Add DecryptConfig with configured gpg private keys for …","Add DecryptConfig with configured key_providers for …","Add DecryptConfig with configured pkcs11 config and YAML …","Add DecryptConfig with configured private keys for …","Add DecryptConfig with configured x509 certs for decryption","","","","","","","","","","Add EncryptConfig with configured gpg parameters for …","Add EncryptConfig with jwe public keys for encryption","Add EncryptConfig with configured keyprovider parameters …","Add EncryptConfig with configured pkcs11 parameters for …","Add EncryptConfig with pkcs7 x509 certs for encryption","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","from_env tries to read the configuration file at the …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","map holding ‘privkeys’, ‘x509s’, ‘gpg-privatekeys…","map holding ‘gpg-recipients’, ‘gpg-pubkeyringfile’…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This is a streaming version of <code>decrypt_layer</code>.","","","","","","Unwrap layer decryption key from OCI descriptor …","","encrypt_layer encrypts the layer by running one encryptor …","Generate annotations for image decryption.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Create the CryptoConfig object that contains the necessary …","Create the CryptoConfig object from the list of recipient …","KeyWrapper is the interface used for wrapping keys using a …","return the keywraper annotation id.","","keyids_from_packet (optional) gets a list of key IDs. This …","","private_keys (optional) gets the array of private keys. It …","Check whether the driver could handle the decryption …","recipients (optional) gets a list of recipients. It is …","unwrap keys data with decrypt config.","wrap keys data with encrypt config.","A Jwe keywrapper","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","A KeyProvider keywrapper","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Create a new instance of <code>KeyProviderKeyWrapper</code>.","","","","","","","UnwrapKey calls appropriate binary-executable or …","","WrapKeys calls appropriate binary-executable or grpc/ttrpc …","MEDIA_TYPE_LAYER_ENC is MIME type used for encrypted …","MEDIA_TYPE_LAYER_GZIP_ENC is MIME type used for encrypted …","MEDIA_TYPE_LAYER_NON_DISTRIBUTABLE_ENC is MIME type used …","MEDIA_TYPE_LAYER_NON_DISTRIBUTABLE_GZIP_ENC is MIME type …","CommandExecuter trait which requires implementation for …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Generated client implementations.","Generated server implementations.","","","","","","","","","","","","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Compress requests with the given encoding.","","","","","","","","","","Generated trait containing gRPC methods that should be …","","Enable decompressing requests with the given encoding.","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","Compress responses with the given encoding, if the client …","","","","","","","","","","","","ExecuteCommand is used to execute a linux command line …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,1,1,0,1,0,1,0,0,0,1,1,0,0,1,1,1,0,1,0,15,0,0,0,0,0,0,0,15,11,12,13,15,11,12,13,11,12,12,11,12,13,11,12,13,73,15,11,12,13,11,12,13,11,73,15,41,15,11,12,13,15,11,12,13,11,12,13,73,13,12,15,11,12,13,15,11,12,13,15,15,13,13,15,11,12,13,11,11,12,13,15,11,12,13,15,11,12,13,15,11,12,13,15,11,12,13,0,0,0,0,0,0,0,32,32,33,34,35,36,37,32,33,34,35,36,37,32,33,34,35,36,32,33,34,35,36,33,35,36,34,34,34,34,34,34,35,36,32,33,34,35,37,36,35,35,35,35,35,32,33,34,35,36,32,33,34,35,36,37,37,32,33,34,35,36,33,32,33,34,35,36,37,32,33,34,35,36,37,37,33,34,35,32,32,34,35,32,33,34,35,36,32,33,34,35,36,37,32,33,34,35,36,37,33,32,33,34,35,36,37,32,33,34,35,36,37,0,0,39,39,39,39,0,0,39,0,39,39,39,39,39,39,39,39,39,39,39,0,0,0,3,0,3,0,3,3,3,3,3,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,0,0,45,45,0,0,0,0,0,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,47,0,0,46,47,46,47,46,47,46,47,46,47,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,0,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,67,66,66,67,0,72,72,72,72,72,72,72,72,72,72,72],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[1,[[5,[2,[4,[3]]]]]],0,[-1,-1,[]],[6,[[7,[[4,[3]]]]]],[[[5,[2,2]]],[[5,[2,2]]]],0,[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],0,0,[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[11,11],[12,12],[13,13],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2,13],[[7,[14]]],[],[]],[[[15,[-1]],-1,13],[[7,[14]]],[]],[[],11],[[],12],[[],13],[-1,[[9,[11]]],16],[-1,[[9,[12]]],16],[-1,[[9,[13]]],16],0,[[-1,-2,13],[[7,[14]]],[],[]],[[[15,[-1]],-1,6,13],[[7,[14]]],[]],[[-1,13],[[7,[14]]],[]],[[[15,[-1]],13],[[7,[14]]],[]],[[11,17],18],[[12,17],18],[[13,17],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[7,[[20,[19]]]]],[]],[[13,6],[[21,[[20,[19]]]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[[],[[7,[[15,[-1]]]]],[]],[[[22,[[15,[-1]]]],23,24],[[26,[[25,[14]]]]],27],0,0,[[[15,[-1]],[28,[19]]],[[25,[29]]],30],[[11,-1],9,31],[[12,-1],9,31],[[13,-1],9,31],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[32,32],[33,33],[34,34],[35,35],[36,36],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],0,0,0,[[34,[20,[[20,[19]]]],[20,[[20,[19]]]]],[[7,[14]]]],[[34,[20,[[20,[19]]]]],[[7,[14]]]],[[34,[20,[[20,[19]]]],[20,[[20,[19]]]]],[[7,[14]]]],[[34,[20,[[20,[19]]]],[20,[[20,[19]]]]],[[7,[14]]]],[[34,[20,[[20,[19]]]]],[[7,[14]]]],[[],34],[[],35],[[],36],[-1,[[9,[32]]],16],[-1,[[9,[33]]],16],[-1,[[9,[34]]],16],[-1,[[9,[35]]],16],[-1,[[9,[37]]],16],0,[[35,[20,[[20,[19]]]],[20,[19]]],[[7,[14]]]],[[35,[20,[[20,[19]]]]],[[7,[14]]]],[[35,[20,[[20,[19]]]]],[[7,[14]]]],[[35,[20,[[20,[19]]]],[20,[[20,[19]]]],[20,[[20,[19]]]]],[[7,[14]]]],[[35,[20,[[20,[19]]]]],[[7,[14]]]],[[32,17],18],[[33,17],18],[[34,17],18],[[35,17],18],[[36,17],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[6,[[7,[[21,[37]]]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],0,0,0,0,0,[[32,-1],9,31],[[34,-1],9,31],[[35,-1],9,31],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],0,[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[-1,[21,[[5,[2,2]]]],[28,[19]]],[[7,[[14,[[0,[27,38]],2]]]]],[27,38]],[-1,-2,[],[]],[-1,-2,[],[]],[39,39],[[-1,-2],14,[],[]],[[34,-1,[21,[[5,[2,2]]]],40],[[7,[[14,[[21,[[0,[30]]]],2]]]]],30],[[34,[21,[[5,[2,2]]]]],[[7,[[20,[19]]]]]],[[],39],[[35,-1,[21,[[5,[2,2]]]],6],[[7,[[14,[[21,[[0,[30,41]]]],39]]]]],30],[[39,35,[21,[[5,[2,2]]]],[21,[-1]]],[[7,[[5,[2,2]]]]],41],[[39,17],18],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],[[[20,[2]],[20,[2]]],[[7,[36]]]],[[[20,[2]],[20,[2]]],[[7,[36]]]],0,[-1,2,[]],0,[[-1,2],[[21,[[20,[42]]]]],[]],0,[[-1,[5,[2,[20,[[20,[19]]]]]]],[[21,[[20,[[20,[19]]]]]]],[]],[[-1,[5,[2,[20,[[20,[19]]]]]]],40,[]],[[-1,2],[[21,[[20,[2]]]]],[]],[[-1,34,[28,[19]]],[[7,[[20,[19]]]]],[]],[[-1,35,[28,[19]]],[[7,[[20,[19]]]]],[]],0,[43,2],[-1,-2,[],[]],[-1,-2,[],[]],[[43,17],18],[-1,-1,[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[[43,[5,[2,[20,[[20,[19]]]]]]],[[21,[[20,[[20,[19]]]]]]]],[[43,[5,[2,[20,[[20,[19]]]]]]],40],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[[43,34,[28,[19]]],[[7,[[20,[19]]]]]],[-1,-2,[],[]],[[43,35,[28,[19]]],[[7,[[20,[19]]]]]],0,[44,2],0,[-1,-2,[],[]],[-1,-2,[],[]],[[44,17],18],[-1,-1,[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[[2,33,[21,[[4,[45]]]]],44],[[44,[5,[2,[20,[[20,[19]]]]]]],40],0,0,[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[[44,34,[28,[19]]],[[7,[[20,[19]]]]]],[-1,-2,[],[]],[[44,35,[28,[19]]],[[7,[[20,[19]]]]]],0,0,0,0,0,[[-1,2,[28,[2]],[20,[19]]],[[7,[[20,[19]]]]],[]],[[45,17],18],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[46,14],[47,14],[46,46],[47,47],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[],46],[[],47],[46,29],[47,29],[[46,46],40],[[47,47],40],[[46,17],18],[[47,17],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[48,[-1]],49],[[48,[-1]]],[[51,[50]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[48,[-1]]],[[48,[-1]]],52],[[-1,-2],14,[],[]],[-1,[[9,[[48,[53]],54]]],[[56,[55]]]],[[[48,[-1]],17],18,57],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[48,[-1]]],[[51,[50]]]],[[[48,[-1]],49],[[48,[-1]]],[[51,[50]]]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[[[48,[-1]],-2],[[9,[[58,[47]],59]]],[[51,[50]]],[[60,[46]]]],[-1,-2,[],[]],[[-1,-2],[[48,[[61,[-1,-2]]]]],[[63,[[62,[50]]]],[51,[50]]],64],[[-1,65],[[48,[-1]]],[[51,[50]]]],[[[48,[-1]],-2],[[9,[[58,[47]],59]]],[[51,[50]]],[[60,[46]]]],0,0,[[[66,[-1]],49],[[66,[-1]]],67],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[62,[-2]]],[],[],[]],[[[66,[-1]],[62,[-2]]],[],67,[68,38]],[[[66,[-1]]],[[66,[-1]]],67],[[-1,-2],14,[],[]],[[[66,[-1]],17],18,[57,67]],[-1,-1,[]],[[[69,[-1]]],[[66,[-1]]],67],[-1,-1,[]],[-1,-2,[],[]],[-1,[[70,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[66,[-1]]],67],[[[66,[-1]],23],[[26,[[9,[14]]]]],67],[[-1,23],[[26,[[9,[14]]]]],[]],[[[66,[-1]],49],[[66,[-1]]],67],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[[-1,[8,[46]]],[[22,[[4,[71]]]]],[]],[-1,-2,[],[]],[[-1,-2],[[61,[[66,[-1]],-2]]],67,64],[[-1,[8,[46]]],[[22,[[4,[71]]]]],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[72,2,[28,[2]],[20,[19]]],[[7,[[20,[19]]]]]],[[72,17],18],[-1,-1,[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]]],"c":[],"p":[[3,"KEY_WRAPPERS",0],[3,"String",411],[8,"KeyWrapper",251],[3,"Box",412],[3,"HashMap",413],[15,"str"],[6,"Result",414],[3,"Request",415],[4,"Result",416],[3,"TypeId",417],[3,"PrivateLayerBlockCipherOptions",20],[3,"PublicLayerBlockCipherOptions",20],[3,"LayerBlockCipherOptions",20],[15,"tuple"],[4,"LayerBlockCipherHandler",20],[8,"Deserializer",418],[3,"Formatter",419],[6,"Result",419],[15,"u8"],[3,"Vec",420],[4,"Option",421],[3,"Pin",422],[3,"Context",423],[3,"ReadBuf",424],[6,"Result",425],[4,"Poll",426],[8,"AsyncRead",427],[15,"slice"],[15,"usize"],[8,"Read",428],[8,"Serializer",429],[3,"Command",108],[3,"KeyProviderAttrs",108],[3,"DecryptConfig",108],[3,"EncryptConfig",108],[3,"CryptoConfig",108],[3,"OcicryptConfig",108],[8,"Send",430],[3,"EncLayerFinalizer",228],[15,"bool"],[8,"EncryptionFinalizer",20],[15,"u64"],[3,"JweKeyWrapper",261],[3,"KeyProviderKeyWrapper",277],[8,"CommandExecuter",300],[3,"KeyProviderKeyWrapProtocolInput",306],[3,"KeyProviderKeyWrapProtocolOutput",306],[3,"KeyProviderServiceClient",348],[4,"CompressionEncoding",431],[6,"BoxBody",432],[8,"GrpcService",433],[8,"Clone",434],[3,"Channel",435],[3,"Error",436],[3,"Endpoint",437],[8,"TryInto",438],[8,"Debug",419],[3,"Response",439],[3,"Status",440],[8,"IntoRequest",415],[3,"InterceptedService",441],[3,"Request",442],[8,"Service",443],[8,"Interceptor",441],[3,"Uri",444],[3,"KeyProviderServiceServer",371],[8,"KeyProviderService",371],[8,"Body",445],[3,"Arc",446],[3,"IntoMakeService",447],[8,"Future",448],[3,"Runner",399],[8,"LayerBlockCipher",20]]},\
"resource_uri":{"doc":"ResourceUri is the identification information of all …","t":"DLLLLLLLLLMLMLLMLLLLLMLL","n":["ResourceUri","borrow","borrow_mut","clone","clone_into","deserialize","eq","fmt","from","into","kbs_addr","new","repository","resource_path","serialize","tag","to_owned","try_from","try_from","try_from","try_into","type","type_id","whole_uri"],"q":[[0,"resource_uri"],[24,"core::result"],[25,"serde::de"],[26,"core::fmt"],[27,"core::fmt"],[28,"alloc::string"],[29,"serde::ser"],[30,"url"],[31,"core::any"]],"d":["Resource Id document …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Only return the resource path. This function is used …","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[-1,[[3,[1]]],4],[[1,1],5],[[1,6],7],[-1,-1,[]],[-1,-2,[],[]],0,[[8,8],[[9,[1]]]],0,[1,10],[[1,-1],3,11],0,[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[12,[[9,[1]]]],[8,[[9,[1]]]],[-1,[[3,[-2]]],[],[]],0,[-1,13,[]],[1,10]],"c":[],"p":[[3,"ResourceUri",0],[15,"tuple"],[4,"Result",24],[8,"Deserializer",25],[15,"bool"],[3,"Formatter",26],[6,"Result",26],[15,"str"],[6,"Result",27],[3,"String",28],[8,"Serializer",29],[3,"Url",30],[3,"TypeId",31]]},\
"secret":{"doc":"","t":"GGAANENGNNLLLLLLLLLLLLLLLLLNDERNLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLMLLLMLLAAGDMLLLLLLMMLLLLLLLMMMMLLLLLMGDMLLLLLLLLLLLLLMMMLLLLL","n":["Annotations","ProviderSettings","error","secret","Err","Error","Ok","Result","UnsealEnvelopeFailed","UnsealVaultFailed","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","free","from","init","into","into_request","to_string","try_from","try_into","type_id","vzip","Envelope","Secret","SecretContent","VERSION","Vault","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","fmt","fmt","free","free","from","from","init","init","into","into","into_request","into_request","layout","serialize","serialize","try_from","try_from","try_into","try_into","type","type_id","type_id","unseal","version","vzip","vzip","envelope","vault","Annotations","Envelope","annotations","borrow","borrow_mut","deref","deref_mut","deserialize","drop","encrypted_data","encrypted_key","eq","fmt","free","from","init","into","into_request","iv","key_id","provider","provider_settings","serialize","try_from","try_into","type_id","vzip","wrap_type","Annotations","VaultSecret","annotations","borrow","borrow_mut","deref","deref_mut","deserialize","drop","eq","fmt","free","from","init","into","into_request","name","provider","provider_settings","serialize","try_from","try_into","type_id","vzip"],"q":[[0,"secret"],[4,"secret::error"],[27,"secret::secret"],[72,"secret::secret::layout"],[74,"secret::secret::layout::envelope"],[102,"secret::secret::layout::vault"],[126,"core::fmt"],[127,"core::fmt"],[128,"tonic::request"],[129,"alloc::string"],[130,"core::result"],[131,"core::any"],[132,"serde::de"],[133,"serde::ser"],[134,"alloc::vec"]],"d":["Annotations is extra information of this …","ProviderSettings are extra information to create a client","","","Contains the error value","","Contains the success value","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Annotations is extra information of this …","An Envelope is a secret encrypted by digital envelope …","KMS specific fields to locate the Key inside KMS","","","","","","","Encrypted data (secret) by DEK","Encrypted DEK by key inside KMS","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","IV of encrypted_data, if used","key id to locate the key inside KMS","decryptor driver of the secret","extra information to create a client","","","","","","Encryption scheme of the Encrypted data by DEK","Annotations is extra information of this …","","Other fields used to fetch the secret","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","The id of this secret","decryptor driver of the secret","extra information to create a client","","","","",""],"i":[0,0,0,0,18,0,18,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,0,0,0,11,11,13,11,13,11,13,11,13,11,13,11,13,11,13,11,13,11,13,11,13,11,13,11,13,11,13,0,11,13,11,13,11,13,13,11,13,13,13,11,13,0,0,0,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20],"f":[0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,-1,[]],[1,-1,[]],[1,2],[[3,4],5],[[3,4],5],[[[6,[-1]]],2,[]],[-1,-1,[]],[[],1],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[-1,[[9,[11]]],12],[-1,[[9,[13]]],12],[1,2],[1,2],[[11,11],14],[[13,13],14],[[11,4],5],[[13,4],5],[[[6,[-1]]],2,[]],[[[6,[-1]]],2,[]],[-1,-1,[]],[-1,-1,[]],[[],1],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],0,[[11,-1],9,15],[[13,-1],9,15],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],0,[-1,10,[]],[-1,10,[]],[13,[[18,[[17,[16]]]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,-1,[]],[1,-1,[]],[-1,[[9,[19]]],12],[1,2],0,0,[[19,19],14],[[19,4],5],[[[6,[-1]]],2,[]],[-1,-1,[]],[[],1],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],0,0,0,0,[[19,-1],9,15],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,-1,[]],[1,-1,[]],[-1,[[9,[20]]],12],[1,2],[[20,20],14],[[20,4],5],[[[6,[-1]]],2,[]],[-1,-1,[]],[[],1],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],0,0,0,[[20,-1],9,15],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]]],"c":[],"p":[[15,"usize"],[15,"tuple"],[4,"Error",4],[3,"Formatter",126],[6,"Result",126],[3,"NonNull",127],[3,"Request",128],[3,"String",129],[4,"Result",130],[3,"TypeId",131],[4,"SecretContent",27],[8,"Deserializer",132],[3,"Secret",27],[15,"bool"],[8,"Serializer",133],[15,"u8"],[3,"Vec",134],[6,"Result",4],[3,"Envelope",74],[3,"VaultSecret",102]]},\
"secret_cli":{"doc":"","t":"NDENEDNDENNLLLLLLLLLLLLLLLLLLLLLLLLMMLMLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLMMFMLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLL","n":["Ali","AliProviderArgs","Cli","Envelope","EnvelopeArgs","EnvelopeCommand","Seal","SealArgs","TypeArgs","Unseal","Vault","augment_args","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands","augment_subcommands","augment_subcommands_for_update","augment_subcommands_for_update","augment_subcommands_for_update","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cert_path","client_key_file_path","command","command","command_for_update","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","file_path","free","free","free","free","free","free","from","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","group_id","group_id","group_id","handle_envelope_provider","has_subcommand","has_subcommand","has_subcommand","init","init","init","init","init","init","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","key_id","kms_instance_id","main","password_file_path","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type","type_id","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"secret_cli"],[149,"clap_builder::builder::command"],[150,"core::ptr::non_null"],[151,"clap_builder::parser::matches::arg_matches"],[152,"clap_builder"],[153,"core::result"],[154,"clap_builder::util::id"],[155,"core::option"],[156,"kms::api"],[157,"alloc::boxed"],[158,"kms::api"],[159,"tonic::request"],[160,"core::any"]],"d":["Alibaba KMS driver to seal the envelope","","","Envelope format secret","","","Seal the secret","","","Unseal the given secret (TODO)","Vault format secret (TODO)","","","","","","","","","","","","","","","","","","","","","","","","","path of the CA cert of the KMS instance","path of the client key to access the KMS","","","","","","","","","","","","","","","","","","","","","","path of the file which contains the content to be sealed","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","key id used in the KMS","id if the kms instance","","path of the password file","","","","","","","","","","","","","Type of the Secret, i.e. <code>vault</code> or <code>envelope</code>","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[12,0,0,10,0,0,6,0,0,6,10,9,11,13,9,11,13,6,10,12,6,10,12,6,9,10,11,12,13,6,9,10,11,12,13,13,13,6,11,6,6,9,10,11,12,13,6,9,10,11,12,13,6,9,10,11,12,13,9,6,9,10,11,12,13,6,9,10,11,12,13,6,9,10,11,12,13,6,9,10,11,12,13,9,11,13,0,6,10,12,6,9,10,11,12,13,6,9,10,11,12,13,6,9,10,11,12,13,11,13,0,13,6,9,10,11,12,13,6,9,10,11,12,13,9,6,9,10,11,12,13,6,9,10,11,12,13,6,9,10,11,12,13,6,9,10,11,12,13],"f":[0,0,0,0,0,0,0,0,0,0,0,[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[],1],0,[[],1],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],0,[[[4,[-1]]],3,[]],[[[4,[-1]]],3,[]],[[[4,[-1]]],3,[]],[[[4,[-1]]],3,[]],[[[4,[-1]]],3,[]],[[[4,[-1]]],3,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[5,[[8,[6,7]]]],[5,[[8,[9,7]]]],[5,[[8,[10,7]]]],[5,[[8,[11,7]]]],[5,[[8,[12,7]]]],[5,[[8,[13,7]]]],[5,[[8,[6,7]]]],[5,[[8,[9,7]]]],[5,[[8,[10,7]]]],[5,[[8,[11,7]]]],[5,[[8,[12,7]]]],[5,[[8,[13,7]]]],[[],[[15,[14]]]],[[],[[15,[14]]]],[[],[[15,[14]]]],[12,[[3,[[17,[16]],18,19]]]],[20,21],[20,21],[20,21],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],0,0,[[],3],0,[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],0,[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[[6,5],[[8,[3,7]]]],[[9,5],[[8,[3,7]]]],[[10,5],[[8,[3,7]]]],[[11,5],[[8,[3,7]]]],[[12,5],[[8,[3,7]]]],[[13,5],[[8,[3,7]]]],[[6,5],[[8,[3,7]]]],[[9,5],[[8,[3,7]]]],[[10,5],[[8,[3,7]]]],[[11,5],[[8,[3,7]]]],[[12,5],[[8,[3,7]]]],[[13,5],[[8,[3,7]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Command",149],[15,"usize"],[15,"tuple"],[3,"NonNull",150],[3,"ArgMatches",151],[4,"Cli",0],[6,"Error",152],[4,"Result",153],[3,"SealArgs",0],[4,"TypeArgs",0],[3,"EnvelopeCommand",0],[4,"EnvelopeArgs",0],[3,"AliProviderArgs",0],[3,"Id",154],[4,"Option",155],[8,"Encrypter",156],[3,"Box",157],[6,"ProviderSettings",156],[3,"String",158],[15,"str"],[15,"bool"],[3,"Request",159],[3,"TypeId",160]]},\
"sev":{"doc":"","t":"DLLLLLFLLLL","n":["SecretKernelModule","borrow","borrow_mut","drop","from","into","mount_security_fs","new","try_from","try_into","type_id"],"q":[[0,"sev"],[11,"anyhow"],[12,"core::result"],[13,"core::any"]],"d":["","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,1,1,1,1,1,0,1,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[-1,-1,[]],[-1,-2,[],[]],[[],[[3,[2]]]],[[],[[3,[1]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,5,[]]],"c":[],"p":[[3,"SecretKernelModule",0],[15,"tuple"],[6,"Result",11],[4,"Result",12],[3,"TypeId",13]]},\
"test_binaries":{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[]},\
"test_utils":{"doc":"","t":"OO","n":["assert_result","assert_retry"],"q":[[0,"test_utils"]],"d":["",""],"i":[0,0],"f":[0,0],"c":[],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
